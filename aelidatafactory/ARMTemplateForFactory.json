{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "aelidatafactory"
		},
		"AzureSqlDatabase1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AzureSqlDatabase1'"
		},
		"Oracle1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Oracle1'"
		},
		"linkstgGen2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'linkstgGen2'"
		},
		"AzureSqlDatabase1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sqlserver0213.database.windows.net"
		},
		"AzureSqlDatabase1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "sqlserver2"
		},
		"AzureSqlDatabase1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "aelisa0213"
		},
		"linkstgGen2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://trainingaelistorage.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ORACLE_COPY_DATA')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OracleTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tbl_countries",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-29T03:40:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OracleTable1')]",
				"[concat(variables('factoryId'), '/datasets/tbl_countries')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_Adding_File_Name_column_dynamic')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "File_Name",
										"value": "$$FILENAME"
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "emp_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "emp_id",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "File_Name",
											"type": "String"
										},
										"sink": {
											"name": "File_Name",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "sourcedataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "filne_name_column",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-26T03:08:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sourcedataset')]",
				"[concat(variables('factoryId'), '/datasets/filne_name_column')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_Assign1_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "dt_last_file_modified",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata2",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "dt_latest_file",
											"type": "DatasetReference",
											"parameters": {
												"FileName": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"lastModified",
											"itemName"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('Get Metadata2').output.lastModified,variables('RefDateTime') )",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "RefDateTime",
													"value": {
														"value": "@activity('Get Metadata2').output.lastModified",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Set variable2",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Set variable1",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "latestFile",
													"value": {
														"value": "@activity('Get Metadata2').output.itemName",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "dt_latest_file",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "@variables('latestFile')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "dt_tgt_latest_file",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "@variables('latestFile')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"latestFile": {
						"type": "String"
					},
					"RefDateTime": {
						"type": "String",
						"defaultValue": "1900-01-01 00:00:00"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-24T23:31:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dt_last_file_modified')]",
				"[concat(variables('factoryId'), '/datasets/dt_latest_file')]",
				"[concat(variables('factoryId'), '/datasets/dt_tgt_latest_file')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_Copy_csv_to_Stg_Promotion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_csv_to_stg_promotion",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "pizzaProject"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-27T17:47:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_csv_to_stg_promotion')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_IF_Activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Get Metadata1').output.size,10 )",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Message",
										"value": "'Load Run is Skipped'"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy data1 default",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "sourcedataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "Target_switch",
											"type": "DatasetReference",
											"parameters": {
												"Switch1": "Default"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "sourcedataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"size"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Runload": {
						"type": "int",
						"defaultValue": 1
					}
				},
				"variables": {
					"Message": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-25T02:46:22Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sourcedataset')]",
				"[concat(variables('factoryId'), '/datasets/Target_switch')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_IF_Activity_get_Metada')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Get Metadata1').output.size,10 )",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Message",
										"value": "'Load Run is Skipped'"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy data1 default",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "sourcedataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "Target_switch",
											"type": "DatasetReference",
											"parameters": {
												"Switch1": "Default"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "sourcedataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"size"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Runload": {
						"type": "int",
						"defaultValue": 1
					}
				},
				"variables": {
					"Message": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-25T02:51:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sourcedataset')]",
				"[concat(variables('factoryId'), '/datasets/Target_switch')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_Oracle_dynamic_source')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": {
									"value": "@concat('select * from hr.countries where country_id = ',pipeline().parameters.country_id)",
									"type": "Expression"
								},
								"partitionOption": "None",
								"convertDecimalToInteger": false,
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OracleTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tbl_countries",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"country_id": {
						"type": "string",
						"defaultValue": "'CA'"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-29T03:40:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OracleTable1')]",
				"[concat(variables('factoryId'), '/datasets/tbl_countries')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_Oracle_dynamic_source_set_var')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": {
									"value": "@concat('select * from hr.countries where country_id = ',variables('temp'))",
									"type": "Expression"
								},
								"partitionOption": "None",
								"convertDecimalToInteger": false,
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OracleTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tbl_countries",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "temp",
							"value": {
								"value": "'AR'",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"country_id": {
						"type": "string",
						"defaultValue": "'CA'"
					}
				},
				"variables": {
					"var": {
						"type": "String",
						"defaultValue": "'CA'"
					},
					"temp": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-29T03:40:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OracleTable1')]",
				"[concat(variables('factoryId'), '/datasets/tbl_countries')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_Oracle_query')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select * from hr.countries where region_id=2",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OracleTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tbl_countries",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-29T03:40:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OracleTable1')]",
				"[concat(variables('factoryId'), '/datasets/tbl_countries')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_PizzaProject_Product_Dim')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Product_Dim",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceHrProduct": {},
									"sourceHrProductDim": {},
									"Insertsink1": {},
									"sinkUpdate": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "pizzaProject"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-27T17:47:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Product_Dim')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_PizzaProject_Product_Dim_copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Product_Dim_copy",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceHrProductCopy": {},
									"sourceHrProductDimCopy": {},
									"Insertsink1": {},
									"sinkUpdate": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "pizzaProject"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-27T17:47:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Product_Dim_copy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_PizzaProject_df_PROMOTION_DIM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_PROMOTION_DIM_scd3",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sinkInsert": {},
									"sinkUpdate": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "pizzaProject"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-27T17:47:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_PROMOTION_DIM_scd3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_Pizza_Project_df_PROMOTION_DIM_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_PROMOTION_DIM_copy1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sinkInsert": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "pizzaProject"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-27T17:47:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_PROMOTION_DIM_copy1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_PzzaProject_product')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_PRODUCT",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"source3": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "pizzaProject"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-27T17:47:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_PRODUCT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_appendvariable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "arrayvar1",
							"value": {
								"value": "@variables('arrayvar')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Append variable1",
						"type": "AppendVariable",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "arrayvar1",
							"value": {
								"value": "@int(5)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable2",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Append variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "arrayvar1",
							"value": {
								"value": "@variables('arrayvar')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"arrayvar": {
						"type": "Array",
						"defaultValue": [
							1,
							2,
							3,
							4
						]
					},
					"arrayvar1": {
						"type": "Array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-09T02:54:15Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_config_dataload')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "lkp_config_dataload",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select * from hr.config;",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "OracleTable1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach_config_dataload",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "lkp_config_dataload",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('lkp_config_dataload').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "cp_config_dataload",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@item().query",
												"type": "Expression"
											},
											"partitionOption": "None",
											"convertDecimalToInteger": false,
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Oracle_sourcetable",
											"type": "DatasetReference",
											"parameters": {
												"sourcetable": {
													"value": "@item().sourcetable",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "TGT_DataLoad",
											"type": "DatasetReference",
											"parameters": {
												"tgtfile": {
													"value": "@item().targettable",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-29T03:45:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OracleTable1')]",
				"[concat(variables('factoryId'), '/datasets/Oracle_sourcetable')]",
				"[concat(variables('factoryId'), '/datasets/TGT_DataLoad')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_copy_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "sourcedataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Targetdataset",
								"type": "DatasetReference",
								"parameters": {
									"paraDataSet": {
										"value": "@concat(pipeline().parameters.parameterfilename,utcNow())",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "vartargetfilename",
							"value": {
								"value": "@concat('employee_',utcNow())",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"parameterfilename": {
						"type": "string"
					}
				},
				"variables": {
					"vartargetfilename": {
						"type": "String",
						"defaultValue": "tgtemp"
					},
					"finalfilename": {
						"type": "String",
						"defaultValue": "emp_"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-03T19:53:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sourcedataset')]",
				"[concat(variables('factoryId'), '/datasets/Targetdataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_copy_data_clone_GitHub')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "sourcedataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Targetdataset",
								"type": "DatasetReference",
								"parameters": {
									"paraDataSet": {
										"value": "@concat(pipeline().parameters.parameterfilename,utcNow())",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "vartargetfilename",
							"value": {
								"value": "@concat('employee_',utcNow())",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"parameterfilename": {
						"type": "string"
					}
				},
				"variables": {
					"vartargetfilename": {
						"type": "String",
						"defaultValue": "tgtemp"
					},
					"finalfilename": {
						"type": "String",
						"defaultValue": "emp_"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-03T19:53:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sourcedataset')]",
				"[concat(variables('factoryId'), '/datasets/Targetdataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_customer_review_FACT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_customer_review_FACT",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "pizzaProject"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-31T03:28:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_customer_review_FACT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_dataloadStatusSuccessSourceRow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select * from HR.CONFIG where activeflag = 0;",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "OracleTable2",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "StartDate",
										"value": {
											"value": "@utcNow()",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@item().QUERY",
												"type": "Expression"
											},
											"partitionOption": "None",
											"convertDecimalToInteger": false,
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "OracleTable3",
											"type": "DatasetReference",
											"parameters": {
												"SourceTable": {
													"value": "@item().SOURCETABLE",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_Data_AzureProject_stg",
											"type": "DatasetReference",
											"parameters": {
												"TargetFileName": {
													"value": "@item().TARGETTABLE",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Script1",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "Oracle1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('update hr.config set startdate =  ''',variables('StartDate'),''' ,enddate = ''',utcNow(),''' ,status = ''success'',source_row =',activity('Copy data1').output.rowsRead,',target_row = ' , activity('Copy data1').output.rowsCopied, ' where sourcetable = ''',item().sourcetable,'''')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"StartDate": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-02T20:22:33Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OracleTable2')]",
				"[concat(variables('factoryId'), '/datasets/OracleTable3')]",
				"[concat(variables('factoryId'), '/datasets/ds_Data_AzureProject_stg')]",
				"[concat(variables('factoryId'), '/linkedServices/Oracle1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_dataload_param')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select * from hr.config;",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "OracleTable1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@item().query",
												"type": "Expression"
											},
											"partitionOption": "None",
											"convertDecimalToInteger": false,
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Oracle_sourcetable",
											"type": "DatasetReference",
											"parameters": {
												"sourcetable": {
													"value": "@item().sourcetable",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "TGT_DataLoad",
											"type": "DatasetReference",
											"parameters": {
												"tgtfile": {
													"value": "@item().targettable",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-29T03:45:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OracleTable1')]",
				"[concat(variables('factoryId'), '/datasets/Oracle_sourcetable')]",
				"[concat(variables('factoryId'), '/datasets/TGT_DataLoad')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_df_Alter_Row')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_alter_row",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-21T17:11:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_alter_row')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_df_Customer_Stg_DIM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Customer_Stg",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceCustomer": {},
									"sourceEmail": {},
									"sourceCustomerAddress": {},
									"sourcePhoneNumber": {},
									"sourceHotLovers": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "pizzaProject"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-27T17:47:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Customer_Stg')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_df_DepWiseLeadLagRankDensRankRowNumber')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_DepWiseLeadLagRankDensRankRowNumber",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-21T18:48:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_DepWiseLeadLagRankDensRankRowNumber')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_df_LOCATION_DIM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_LOCATION_DIM",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"STATECOUNTRY": {},
									"STGSTORELOCATION": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "pizzaProject"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-27T18:11:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_LOCATION_DIM')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_df_OrderLine_1_TO_OrderLine')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_OrderLine_1_TO_OrderLine",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "pizzaProject"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-27T21:00:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_OrderLine_1_TO_OrderLine')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_df_Order_1_To_Order')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df__member_loyalty_1_to_member_loyalty",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "pizzaProject"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-28T20:58:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df__member_loyalty_1_to_member_loyalty')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_df_PRODUCT_TOPPINGs')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_PRODUCT_TOPPINGs",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "pizzaProject"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-27T17:47:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_PRODUCT_TOPPINGs')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_df_PROMOTION_DIM_QUERY_SCD3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_PROMOTION_DIM_QUERY_SCD3",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sinkINSERT": {},
									"sinkUPDATE": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "pizzaProject"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-27T17:47:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_PROMOTION_DIM_QUERY_SCD3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_df_Sales_Fact_Query')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Sales_Fact_Query",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "pizzaProject"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-27T21:25:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Sales_Fact_Query')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_df_alter_row_join_table_dept')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_alter_row_join_table_dept",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-21T17:11:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_alter_row_join_table_dept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_df_alter_row_join_table_dept_delete')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_alter_row_join_table_dept_delete",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-22T18:03:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_alter_row_join_table_dept_delete')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_df_channel_type')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_channel_type",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "pizzaProject"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-27T17:47:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_channel_type')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_df_conditional_split')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_conditional_split",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {},
									"sink2": {},
									"sink3": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-21T18:21:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_conditional_split')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_df_delivery_type')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_delivery_type",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "pizzaProject"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-27T17:47:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_delivery_type')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_df_dep_wise_salary')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_dep_wish_salary",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-20T19:09:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_dep_wish_salary')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_df_lOCATION_DIM_QUERY_SCD2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_lOCATION_DIM_QUERY_SCD2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {},
									"sinkinsert": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "pizzaProject"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-27T17:47:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_lOCATION_DIM_QUERY_SCD2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_df_lOCATION_DIM_SCD2_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_lOCATION_DIM_SCD2_copy1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {},
									"sinkinsert": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "pizzaProject"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-27T17:47:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_lOCATION_DIM_SCD2_copy1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_df_lead_lag_salary')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_lead_lag_salary",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-21T18:46:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_lead_lag_salary')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_df_merge_file_department_name')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_merge_file_department_name",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-21T20:41:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_merge_file_department_name')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_df_paymeent_ref')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_paymeent_ref",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "pizzaProject"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-27T17:47:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_paymeent_ref')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_df_pivot_emp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_pivot_emp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-22T19:49:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_pivot_emp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_df_src_tgt')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "we can call here dataflow for the running.\ndata pipeline is work like a workflow in informatica",
				"activities": [
					{
						"name": "pip_df_src_tgt",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_src_tgt",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-20T22:01:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_src_tgt')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_filter')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Filter1",
						"type": "Filter",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.filterdata",
								"type": "Expression"
							},
							"condition": {
								"value": "@contains(item(),'data')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"filterdata": {
						"type": "array",
						"defaultValue": [
							"engineer",
							"data mart",
							"data engineer",
							"data analyst",
							"developer"
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-24T03:01:58Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_incremental_load_cdc')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from hr.config_test1 where table_name = '@{pipeline().parameters.Source_Table}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTableConfigTest1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from @{pipeline().parameters.Source_Table} where @{pipeline().parameters.Source_TimeStamp_col} > '@{activity('Lookup1').output.firstRow.watermark}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTableConfigTest1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedTextUdemyTgt",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "cdc.csv"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Source_Table": {
						"type": "string",
						"defaultValue": "transactions"
					},
					"Source_TimeStamp_col": {
						"type": "string",
						"defaultValue": "trans_timestamp"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-26T21:33:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableConfigTest1')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedTextUdemyTgt')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_lookup_activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "lookup",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "source_lkp_frm",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "targetlkp",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@activity('Lookup1').output.firstRow.name",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-09T02:54:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/lookup')]",
				"[concat(variables('factoryId'), '/datasets/source_lkp_frm')]",
				"[concat(variables('factoryId'), '/datasets/targetlkp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_lookup_foreach')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "lookup",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data2",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "source_lkp_frm",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DelimitedText1",
											"type": "DatasetReference",
											"parameters": {
												"foldername": {
													"value": "@item().dept_name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-10T02:55:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/lookup')]",
				"[concat(variables('factoryId'), '/datasets/source_lkp_frm')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_lookup_foreach_unclick_sequential')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "lookup",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Copy data2",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "source_lkp_frm",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DelimitedText1",
											"type": "DatasetReference",
											"parameters": {
												"foldername": {
													"value": "@item().dept_name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-10T02:56:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/lookup')]",
				"[concat(variables('factoryId'), '/datasets/source_lkp_frm')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_oracle_Azure_Database_Order')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OracleTableOrder",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTableOrder",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "pizzaProject"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-27T18:20:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OracleTableOrder')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableOrder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_oracle_azure_database_date')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OracleTableDateData",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTableDateDataNew",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "pizzaProject"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-27T18:07:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OracleTableDateData')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableDateDataNew')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_oracle_to_db_member_loyalty_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "we are convert that data stg to dim stg data come as oracle so we can convert in azuresqltable.",
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OracleTableMembeLoyalty",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTablemember_loyalty",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "pizzaProject"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-28T20:57:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OracleTableMembeLoyalty')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTablemember_loyalty')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_orderLine')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OracleTableOrderLine",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTableOrderLine",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "pizzaProject"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-27T18:24:22Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OracleTableOrderLine')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableOrderLine')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_param_variable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "sourcedataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Targetdataset",
								"type": "DatasetReference",
								"parameters": {
									"paraDataSet": {
										"value": "@concat(pipeline().parameters.parameterfilename,utcNow())",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "vartargetfilename",
							"value": {
								"value": "@concat('employee_',utcNow())",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"parameterfilename": {
						"type": "string"
					}
				},
				"variables": {
					"vartargetfilename": {
						"type": "String",
						"defaultValue": "tgtemp"
					},
					"finalfilename": {
						"type": "String",
						"defaultValue": "emp_"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-03T19:55:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sourcedataset')]",
				"[concat(variables('factoryId'), '/datasets/Targetdataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_param_variable_src')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "sourcedataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Targetdataset",
								"type": "DatasetReference",
								"parameters": {
									"paraDataSet": {
										"value": "@concat(pipeline().parameters.parameterfilename,utcNow())",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "vartargetfilename",
							"value": {
								"value": "@concat('employee_',utcNow())",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"parameterfilename": {
						"type": "string"
					},
					"src_filename": {
						"type": "string"
					},
					"src_filepath": {
						"type": "string"
					}
				},
				"variables": {
					"vartargetfilename": {
						"type": "String",
						"defaultValue": "tgtemp"
					},
					"finalfilename": {
						"type": "String",
						"defaultValue": "emp_"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-24T22:30:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sourcedataset')]",
				"[concat(variables('factoryId'), '/datasets/Targetdataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_stg_customer_review')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_stg_customer_review",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "pizzaProject"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-28T21:25:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_stg_customer_review')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_switch')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Switch1",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.para_switch",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "Output1",
									"activities": [
										{
											"name": "Copy data1",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "DelimitedTextSource",
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													},
													"formatSettings": {
														"type": "DelimitedTextReadSettings"
													}
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"quoteAllText": true,
														"fileExtension": ".txt"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "sourcedataset",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "Target_switch",
													"type": "DatasetReference",
													"parameters": {
														"Switch1": {
															"value": "@pipeline().parameters.para_switch",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "Output2",
									"activities": [
										{
											"name": "Copy data case 2",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "DelimitedTextSource",
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													},
													"formatSettings": {
														"type": "DelimitedTextReadSettings"
													}
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"quoteAllText": true,
														"fileExtension": ".txt"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "sourcedataset",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "Target_switch",
													"type": "DatasetReference",
													"parameters": {
														"Switch1": {
															"value": "@pipeline().parameters.para_switch",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "Copy data1 default",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "sourcedataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "Target_switch",
											"type": "DatasetReference",
											"parameters": {
												"Switch1": "Default"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"para_switch": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-25T02:14:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sourcedataset')]",
				"[concat(variables('factoryId'), '/datasets/Target_switch')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_trigger')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "sourcedataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tgtdataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-04T18:40:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sourcedataset')]",
				"[concat(variables('factoryId'), '/datasets/tgtdataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_trigger_wild')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "sourcedataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tgtdataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"arrayvar1": {
						"type": "Array"
					},
					"arrayvar": {
						"type": "Array",
						"defaultValue": [
							1,
							2,
							3
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-09T02:09:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sourcedataset')]",
				"[concat(variables('factoryId'), '/datasets/tgtdataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_until_Activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until1",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greaterOrEquals(int(variables('var')),4 )",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "temp",
										"value": {
											"value": "@variables('var')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable2",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "var",
										"value": {
											"value": "@string(add(int(variables('temp')),1))",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"var": {
						"type": "String",
						"defaultValue": "1"
					},
					"temp": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-26T02:50:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_wildcard_para')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "source/src_param",
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "src_param1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "targetparam",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-04T18:34:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/src_param1')]",
				"[concat(variables('factoryId'), '/datasets/targetparam')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipe_Member_Loyalty_FACT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Member_Loyalty_FACT",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "pizzaProject"
				},
				"annotations": [],
				"lastPublishTime": "2024-12-28T21:09:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Member_Loyalty_FACT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZURE_TESTING')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "CUSTOMER_DIM.csv",
						"folderPath": "TESTING",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "hr",
					"table": "employees"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableConfigTest1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "table_name",
						"type": "varchar"
					},
					{
						"name": "watermark",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "hr",
					"table": "config_test1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableCustReviewStg')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "hr",
					"table": "stg_customer_review"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableDate')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "DATE_KEY",
						"type": "nvarchar"
					},
					{
						"name": "DAY_YYYY_MM_DD",
						"type": "datetime2",
						"scale": 0
					},
					{
						"name": "DAY_US_MM_DD_YYYY",
						"type": "datetime2",
						"scale": 0
					},
					{
						"name": "DAY_US_LONG",
						"type": "nvarchar"
					},
					{
						"name": "DAY_US_M_D_YY",
						"type": "datetime2",
						"scale": 0
					},
					{
						"name": "WEEK_SHORT",
						"type": "nvarchar"
					},
					{
						"name": "WEEK_NUMBER",
						"type": "nvarchar"
					},
					{
						"name": "WEEK_LONG",
						"type": "nvarchar"
					},
					{
						"name": "MONTH_IN_QUARTER_NUMBER",
						"type": "nvarchar"
					},
					{
						"name": "MONTH_IN_YEAR_SHORT",
						"type": "nvarchar"
					},
					{
						"name": "MONTH_IN_YEAR_LONG",
						"type": "nvarchar"
					},
					{
						"name": "WEEK_WK_QTR_YEAR",
						"type": "nvarchar"
					},
					{
						"name": "WEEK_FROM_TO",
						"type": "nvarchar"
					},
					{
						"name": "WEEK_STARTING",
						"type": "nvarchar"
					},
					{
						"name": "WEEK_WK_YEAR_CONT",
						"type": "nvarchar"
					},
					{
						"name": "WEEK_WK_YEAR",
						"type": "nvarchar"
					},
					{
						"name": "WEEK_WK_QTR_YEAR_CONT",
						"type": "nvarchar"
					},
					{
						"name": "DAY_IN_WEEK_SHORT",
						"type": "nvarchar"
					},
					{
						"name": "DAY_IN_WEEK_NUMBER",
						"type": "nvarchar"
					},
					{
						"name": "DAY_IN_WEEK_LONG",
						"type": "nvarchar"
					},
					{
						"name": "MONTH_SHORT",
						"type": "nvarchar"
					},
					{
						"name": "MONTH_NUMBER",
						"type": "nvarchar"
					},
					{
						"name": "MONTH_LONG",
						"type": "nvarchar"
					},
					{
						"name": "QUARTER_SHORT_US",
						"type": "nvarchar"
					},
					{
						"name": "YEAR",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "hr",
					"table": "Date_data"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableDateData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "hr",
					"table": "Date_Data"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableDateDataNew')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "hr",
					"table": "Date_data"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableDelivery_type')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Delivery_Type_Ref_key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Delivery_Type_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Delivery_Type",
						"type": "varchar"
					},
					{
						"name": "STG_CREATE_DATE",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "hr",
					"table": "DELIVERY_TYPE_REF"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableHRLOCATION_DIM1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Loc_Dim_Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Store_Location_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Store_Name",
						"type": "varchar"
					},
					{
						"name": "Store_Address",
						"type": "varchar"
					},
					{
						"name": "Store_Open_Time",
						"type": "varchar"
					},
					{
						"name": "Store_Close_Time",
						"type": "varchar"
					},
					{
						"name": "State_Name",
						"type": "varchar"
					},
					{
						"name": "FLAG",
						"type": "varchar"
					},
					{
						"name": "DM_CREATE_DATE",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "hr",
					"table": "LOCATION_DIM1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableHRProductDimCopy')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Surr_Product_kEY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Product_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Product_Name",
						"type": "varchar"
					},
					{
						"name": "Product_Price",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					},
					{
						"name": "Is_Active",
						"type": "varchar"
					},
					{
						"name": "PRODUCT_CATEGORY_ID",
						"type": "varchar"
					},
					{
						"name": "Product_Category_Name",
						"type": "varchar"
					},
					{
						"name": "Product_SubCategory_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Product_SubCategory_Name",
						"type": "varchar"
					},
					{
						"name": "Product_Size",
						"type": "varchar"
					},
					{
						"name": "Product_Description",
						"type": "varchar"
					},
					{
						"name": "Eff_Start_Date",
						"type": "date"
					},
					{
						"name": "Eff_End_Date",
						"type": "date"
					},
					{
						"name": "DM_CREATE_DATE",
						"type": "date"
					},
					{
						"name": "Flag",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MD5_Checksum",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "hr",
					"table": "Product_Dim_copy"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableHrChannelRef')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Channel_ref_key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Channel_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Channel_Type",
						"type": "varchar"
					},
					{
						"name": "STG_CREATE_DATE",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "hr",
					"table": "CHANNEL_REF"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableMemberLoyalty')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "hr",
					"table": "member_Loyalty"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableMemberLoyalty1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Member_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CUSTOMER_DIM_KEY",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "loc_dim_key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Date_Key",
						"type": "nvarchar"
					},
					{
						"name": "Order_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Total_Points_Earned",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Remaining_points",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Is_Active",
						"type": "nvarchar"
					},
					{
						"name": "DM_create_date",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "hr",
					"table": "member_Loyalty"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableMember_Loyalty_FACT')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Member_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CUSTOMER_DIM_KEY",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "loc_dim_key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Date_Key",
						"type": "nvarchar"
					},
					{
						"name": "Order_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Total_Points_Earned",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Remaining_points",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Is_Active",
						"type": "nvarchar"
					},
					{
						"name": "DM_create_date",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "hr",
					"table": "Member_Loyalty_FACT"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableOrder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "hr",
					"table": "Order"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableOrder1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ORDER_ID",
						"type": "nvarchar"
					},
					{
						"name": "ORDER_DATE",
						"type": "nvarchar"
					},
					{
						"name": "ORDER_STATUS",
						"type": "nvarchar"
					},
					{
						"name": "TOTAL_AMOUNT",
						"type": "nvarchar"
					},
					{
						"name": "TOTAL_TAX",
						"type": "nvarchar"
					},
					{
						"name": "TIPS",
						"type": "nvarchar"
					},
					{
						"name": "TOTAL_QUANTITY",
						"type": "nvarchar"
					},
					{
						"name": "DELIVERY_ID",
						"type": "nvarchar"
					},
					{
						"name": "CHANNEL_ID",
						"type": "nvarchar"
					},
					{
						"name": "STORE_LOCATION_ID",
						"type": "nvarchar"
					},
					{
						"name": "CUSTOMER_ID",
						"type": "nvarchar"
					},
					{
						"name": "PAYMENT_ID",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "hr",
					"table": "Order_1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableOrder1sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "hr",
					"table": "Order"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableOrderLine')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "hr",
					"table": "OrderLine"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableOrderLine1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ORDER_LINE_ID",
						"type": "nvarchar"
					},
					{
						"name": "UNIT_PRICE",
						"type": "nvarchar"
					},
					{
						"name": "QUANTITY",
						"type": "nvarchar"
					},
					{
						"name": "PROMOTION_AMOUNT",
						"type": "nvarchar"
					},
					{
						"name": "PROMOTION_ID",
						"type": "nvarchar"
					},
					{
						"name": "ORDER_ID",
						"type": "nvarchar"
					},
					{
						"name": "PRODUCT_ID",
						"type": "nvarchar"
					},
					{
						"name": "PRODUCT_TOPPING_ID",
						"type": "nvarchar"
					},
					{
						"name": "TOTAL_AMOUNT",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "hr",
					"table": "OrderLine_1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableOrderLine1Sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "hr",
					"table": "OrderLine"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableProduct')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "hr",
					"table": "Product"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTablePromotion_dim')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "PROMOTION_DIM_KEY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PROMOTION_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PROMOTION_NAME",
						"type": "varchar"
					},
					{
						"name": "PREVIOUS_PROMOTION_NAME",
						"type": "varchar"
					},
					{
						"name": "PROMOTION_TYPE",
						"type": "varchar"
					},
					{
						"name": "PREVIOUS_PROMOTION_TYPE",
						"type": "varchar"
					},
					{
						"name": "DISCOUNT_AMOUNT",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					},
					{
						"name": "PREVIOUS_DISCOUNT_AMOUNT",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					},
					{
						"name": "START_DATE",
						"type": "date"
					},
					{
						"name": "PREVIOUS_START_DATE",
						"type": "date"
					},
					{
						"name": "END_DATE",
						"type": "date"
					},
					{
						"name": "PREVIOUS_END_DATE",
						"type": "date"
					},
					{
						"name": "STG_CREATE_DATE",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "hr",
					"table": "PROMOTION_DIM"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableSalesFact')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "order_line_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "order_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "customer_dim_key",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "payment_ref_key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "channel_ref_key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "delivery_type_ref_key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "product_topping_dim_key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "loc_dim_key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Surr_Product_key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "promotion_dim_key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "date_key",
						"type": "nvarchar"
					},
					{
						"name": "order_date",
						"type": "date"
					},
					{
						"name": "order_status",
						"type": "nvarchar"
					},
					{
						"name": "quantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "unit_price",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "topping_price",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					},
					{
						"name": "promotion_amount",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "DM_create_date",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "hr",
					"table": "SALES_FACT"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableSourceHrProductDim')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Surr_Product_kEY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Product_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Product_Name",
						"type": "varchar"
					},
					{
						"name": "Product_Price",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					},
					{
						"name": "Is_Active",
						"type": "varchar"
					},
					{
						"name": "PRODUCT_CATEGORY_ID",
						"type": "varchar"
					},
					{
						"name": "Product_Category_Name",
						"type": "varchar"
					},
					{
						"name": "Product_SubCategory_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Product_SubCategory_Name",
						"type": "varchar"
					},
					{
						"name": "Product_Size",
						"type": "varchar"
					},
					{
						"name": "Product_Description",
						"type": "varchar"
					},
					{
						"name": "Eff_Start_Date",
						"type": "date"
					},
					{
						"name": "Eff_End_Date",
						"type": "date"
					},
					{
						"name": "DM_CREATE_DATE",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "hr",
					"table": "Product_Dim"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable_Hr_Stg_Promotion')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Promotion_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Promotion_Name",
						"type": "varchar"
					},
					{
						"name": "Promotion_Type",
						"type": "varchar"
					},
					{
						"name": "Discount_amount",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					},
					{
						"name": "START_DATE",
						"type": "date"
					},
					{
						"name": "END_DATE",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "hr",
					"table": "STG_PROMOTION"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable_PRODUCT_TOPPINGS_dim')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Product_Topping_Dim_Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Product_Topping_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Topping_Name",
						"type": "varchar"
					},
					{
						"name": "Topping_Price",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					},
					{
						"name": "Is_Active",
						"type": "varchar"
					},
					{
						"name": "Effective_Date",
						"type": "date"
					},
					{
						"name": "END_DATE",
						"type": "date"
					},
					{
						"name": "Flag",
						"type": "varchar"
					},
					{
						"name": "DM_CREATE_DATE",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "hr",
					"table": "PRODUCT_TOPPINGS_DIM"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable_payment_ref')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Payment_Ref_Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Payment_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Payment_Type",
						"type": "varchar"
					},
					{
						"name": "STG_CREATE_DATE",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "hr",
					"table": "PAYMENT_REF"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTablecustomer_review_FACT')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customer_dim_key",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "loc_dim_key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "date_key",
						"type": "nvarchar"
					},
					{
						"name": "order_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "feedback",
						"type": "nvarchar"
					},
					{
						"name": "feedback_date",
						"type": "date"
					},
					{
						"name": "recomended",
						"type": "nvarchar"
					},
					{
						"name": "DM_create_date",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "hr",
					"table": "customer_review_FACT"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTablemember_loyalty')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "hr",
					"table": "member_loyalty_1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataFlowSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "SRC_DEPARTMENTS_FF.txt",
						"folderPath": "source/hr_schema",
						"fileSystem": "data"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DEPARTMENT_ID|DEPARTMENT_NAME|MANAGER_ID|LOCATION_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"foldername": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('target/foreach/',dataset().foldername)",
							"type": "Expression"
						},
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedTextCust_review_stg')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_CUSTOMER_REVIEW.csv",
						"folderPath": "Target/AzurreProject/stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CUSTOMER_REVIEW_ID",
						"type": "String"
					},
					{
						"name": "RATING_SCALE",
						"type": "String"
					},
					{
						"name": "FEEDBACK",
						"type": "String"
					},
					{
						"name": "FEEDBACK_DATE",
						"type": "String"
					},
					{
						"name": "RECOMENDED",
						"type": "String"
					},
					{
						"name": "CUSTOMER_ID",
						"type": "String"
					},
					{
						"name": "ORDER_ID",
						"type": "String"
					},
					{
						"name": "STORE_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedTextUdemyTgt')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string",
						"defaultValue": "test.csv"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": "Udemy",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracleTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Oracle1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "HR",
					"table": "CONFIG"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Oracle1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracleTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Oracle1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "HR",
					"table": "CONFIG"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Oracle1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracleTable3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Oracle1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SourceTable": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "HR",
					"table": {
						"value": "@dataset().SourceTable",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Oracle1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracleTableDateData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Oracle1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "HR",
					"table": "STG_DATE_DATA"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Oracle1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracleTableMembeLoyalty')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Oracle1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "HR",
					"table": "STG_MEMBER_LOYALTY"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Oracle1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracleTableOrder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Oracle1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "HR",
					"table": "STG_ORDER"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Oracle1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracleTableOrderLine')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Oracle1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "HR",
					"table": "STG_ORDER_LINES"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Oracle1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracleTableTGT')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Oracle1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "HR",
					"table": "tbl_countries"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Oracle1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Oracle_sourcetable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Oracle1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"sourcetable": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "hr",
					"table": {
						"value": "@dataset().sourcetable",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Oracle1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TGT_DataLoad')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tgtfile": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat(dataset().tgtfile,'.csv')",
							"type": "Expression"
						},
						"folderPath": "Target/DataLoad",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Target_switch')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Switch1": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('target/',dataset().Switch1)",
							"type": "Expression"
						},
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Targetdataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"paraDataSet": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().paraDataSet",
							"type": "Expression"
						},
						"folderPath": "Target",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Azure_Project_Stg_Hot_Lovers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_HUT_LOVER.csv",
						"folderPath": "Target/AzurreProject/stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "HUT_LOVERS_ID",
						"type": "String"
					},
					{
						"name": "JOINING_DATE",
						"type": "String"
					},
					{
						"name": "IS_ACTIVE",
						"type": "String"
					},
					{
						"name": "MEMBER_ID",
						"type": "String"
					},
					{
						"name": "CUSTMOER_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Azure_Project_Stg_customer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_CUSTOMERS.csv",
						"folderPath": "Target/AzurreProject/stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CUSTOMER_ID",
						"type": "String"
					},
					{
						"name": "CUSTOMER_FIRST_NAME",
						"type": "String"
					},
					{
						"name": "CUSTOMER_LAST_NAME",
						"type": "String"
					},
					{
						"name": "CUSTOMER_DOB",
						"type": "String"
					},
					{
						"name": "CUSTOMER_TYPE",
						"type": "String"
					},
					{
						"name": "IS_LOYAL",
						"type": "String"
					},
					{
						"name": "FIRST_PURCHASE_DATE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Azure_Project_Stg_customer_Address')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_CUSTOMER_ADDRESS.csv",
						"folderPath": "Target/AzurreProject/stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CUSTOMER_ADDRESS_ID",
						"type": "String"
					},
					{
						"name": "ADDRESS_LANE1",
						"type": "String"
					},
					{
						"name": "ADDRESS_LANE_2",
						"type": "String"
					},
					{
						"name": "CITY_NAME",
						"type": "String"
					},
					{
						"name": "STATE_NAME",
						"type": "String"
					},
					{
						"name": "COUNTRY_NAME",
						"type": "String"
					},
					{
						"name": "ZIP_CODE",
						"type": "String"
					},
					{
						"name": "GATE_CODE",
						"type": "String"
					},
					{
						"name": "ADDRESS_TYPE",
						"type": "String"
					},
					{
						"name": "ADDRESS_STATUS",
						"type": "String"
					},
					{
						"name": "CUSTOMER_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Azure_Project_Stg_customer_phone_number')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_CUSTOMER_PHONE_NUMBER.csv",
						"folderPath": "Target/AzurreProject/stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CUSTOMER_PHONE_NUMBER_ID",
						"type": "String"
					},
					{
						"name": "CUSTOMER_PHONE_NUMBER",
						"type": "String"
					},
					{
						"name": "CUSTOMER_PHONE_TYPE",
						"type": "String"
					},
					{
						"name": "CUSTOMER_PHONE_STATUS",
						"type": "String"
					},
					{
						"name": "CUSTOMER_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Azure_Project_Stg_email')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_CUSTOMER_EMAIL.csv",
						"folderPath": "Target/AzurreProject/stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CUSTOMER_EMAIL_ID",
						"type": "String"
					},
					{
						"name": "CUSTOMER_EMAIL",
						"type": "String"
					},
					{
						"name": "CUSTOMER_EMAIL_TYPE",
						"type": "String"
					},
					{
						"name": "CUSTOMER_EMAIL_STATUS",
						"type": "String"
					},
					{
						"name": "CUSTOMER_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_PizzaProject_Customer_DIM')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "hr",
					"table": "CUSTOMER_DIM"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_STG_STORE_LOCATION')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_STORE_LOCATION.csv",
						"folderPath": "Target/AzurreProject/stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "STORE_LOCATION_ID",
						"type": "String"
					},
					{
						"name": "STORE_NAME",
						"type": "String"
					},
					{
						"name": "STORE_ADDRESS",
						"type": "String"
					},
					{
						"name": "STORE_PHONE_NUMBER",
						"type": "String"
					},
					{
						"name": "STORE_OPEN_TIME",
						"type": "String"
					},
					{
						"name": "STORE_CLOSE_TIME",
						"type": "String"
					},
					{
						"name": "STATE_COUNTRY_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Sink_Customer_DIM')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_pizzaproject_Location_DIM')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "hr",
					"table": "LOCATION_DIM"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Data_AzureProject_stg')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TargetFileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat(dataset().TargetFileName,'.csv')",
							"type": "Expression"
						},
						"folderPath": "Target/AzurreProject/stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_PRODUCT')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_PRODUCT.csv",
						"folderPath": "Target/AzurreProject/stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PRODUCT_ID",
						"type": "String"
					},
					{
						"name": "PRODUCT_NAME",
						"type": "String"
					},
					{
						"name": "PRODUCT_PRICE",
						"type": "String"
					},
					{
						"name": "PRODUCT_DESCRIPTION",
						"type": "String"
					},
					{
						"name": "CALORIES",
						"type": "String"
					},
					{
						"name": "IS_ACTIVE",
						"type": "String"
					},
					{
						"name": "PRODUCT_SUBCATEGORY_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_PRODUCT_CATEGORY')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_PRODUCT_CATEGORY.csv",
						"folderPath": "Target/AzurreProject/stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PRODUCT_CATEGORY_ID",
						"type": "String"
					},
					{
						"name": "PRODUCT_CATEGORY_NAME",
						"type": "String"
					},
					{
						"name": "PRODUCT_CATEGORY_DESCRIPTION",
						"type": "String"
					},
					{
						"name": "IS_ACTIVE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_PRODUCT_SUBCATEGORY')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_PRODUCT_SUB_CATEGORY.csv",
						"folderPath": "Target/AzurreProject/stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PRODUCT_SUBCATEGORY_ID",
						"type": "String"
					},
					{
						"name": "PRODUCT_SUBCATEGORY_NAME",
						"type": "String"
					},
					{
						"name": "PRODUCT_SIZE",
						"type": "String"
					},
					{
						"name": "PRODUCT_CATEGORY_ID",
						"type": "String"
					},
					{
						"name": "IS_ACTIVE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_aelisa_DepWiseSalary_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "aelisa"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_data_Target_DataLoad_employee_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "employee.csv",
						"folderPath": "Target/DataLoad",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "PHONE_NUMBER",
						"type": "String"
					},
					{
						"name": "HIRE_DATE",
						"type": "String"
					},
					{
						"name": "JOB_ID",
						"type": "String"
					},
					{
						"name": "SALARY",
						"type": "String"
					},
					{
						"name": "COMMISSION_PCT",
						"type": "String"
					},
					{
						"name": "MANAGER_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_dept_src')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "SRC_DEPARTMENTS_FF.txt",
						"folderPath": "source/hr_schema",
						"fileSystem": "data"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DEPARTMENT_ID|DEPARTMENT_NAME|MANAGER_ID|LOCATION_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_dept_src_tgt')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "aelisa"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					},
					{
						"name": "SALARY",
						"type": "String"
					},
					{
						"name": "min_salary",
						"type": "String"
					},
					{
						"name": "max_salary",
						"type": "String"
					},
					{
						"name": "avg_salary",
						"type": "String"
					},
					{
						"name": "sum_salary",
						"type": "String"
					},
					{
						"name": "count_dept_id",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_src_tgt_dep_name')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Department_Name",
						"fileSystem": "aelisa"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "PHONE_NUMBER",
						"type": "String"
					},
					{
						"name": "HIRE_DATE",
						"type": "String"
					},
					{
						"name": "JOB_ID",
						"type": "String"
					},
					{
						"name": "SALARY",
						"type": "String"
					},
					{
						"name": "COMMISSION_PCT",
						"type": "String"
					},
					{
						"name": "MANAGER_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_NAME",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_stg_PROMOTION')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_PROMOTIONS.csv",
						"folderPath": "Target/AzurreProject/stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PROMOTION_ID",
						"type": "String"
					},
					{
						"name": "PROMOTION_NAME",
						"type": "String"
					},
					{
						"name": "PROMOTION_TYPE",
						"type": "String"
					},
					{
						"name": "DISCOUNT_AMOUNT",
						"type": "String"
					},
					{
						"name": "START_DATE",
						"type": "String"
					},
					{
						"name": "END_DATE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_stg_STATE_COUNTRY')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_STATE_COUNTRY.csv",
						"folderPath": "Target/AzurreProject/stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "STATE_COUNTRY_ID",
						"type": "String"
					},
					{
						"name": "STATE_NAME",
						"type": "String"
					},
					{
						"name": "STATE_ABBREVATION",
						"type": "String"
					},
					{
						"name": "STATE_COUNTRY",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dt_Date_stg')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_DATE_DATA.csv",
						"folderPath": "Target/AzurreProject/stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DATE_KEY",
						"type": "String"
					},
					{
						"name": "DAY_YYYY_MM_DD",
						"type": "String"
					},
					{
						"name": "DAY_US_MM_DD_YYYY",
						"type": "String"
					},
					{
						"name": "DAY_US_LONG",
						"type": "String"
					},
					{
						"name": "DAY_US_M_D_YY",
						"type": "String"
					},
					{
						"name": "WEEK_SHORT",
						"type": "String"
					},
					{
						"name": "WEEK_NUMBER",
						"type": "String"
					},
					{
						"name": "WEEK_LONG",
						"type": "String"
					},
					{
						"name": "MONTH_IN_QUARTER_NUMBER",
						"type": "String"
					},
					{
						"name": "MONTH_IN_YEAR_SHORT",
						"type": "String"
					},
					{
						"name": "MONTH_IN_YEAR_LONG",
						"type": "String"
					},
					{
						"name": "WEEK_WK_QTR_YEAR",
						"type": "String"
					},
					{
						"name": "WEEK_FROM_TO",
						"type": "String"
					},
					{
						"name": "WEEK_STARTING",
						"type": "String"
					},
					{
						"name": "WEEK_WK_YEAR_CONT",
						"type": "String"
					},
					{
						"name": "WEEK_WK_YEAR",
						"type": "String"
					},
					{
						"name": "WEEK_WK_QTR_YEAR_CONT",
						"type": "String"
					},
					{
						"name": "DAY_IN_WEEK_SHORT",
						"type": "String"
					},
					{
						"name": "DAY_IN_WEEK_NUMBER",
						"type": "String"
					},
					{
						"name": "DAY_IN_WEEK_LONG",
						"type": "String"
					},
					{
						"name": "MONTH_SHORT",
						"type": "String"
					},
					{
						"name": "MONTH_NUMBER",
						"type": "String"
					},
					{
						"name": "MONTH_LONG",
						"type": "String"
					},
					{
						"name": "QUARTER_SHORT_US",
						"type": "String"
					},
					{
						"name": "YEAR",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dt_STG_PRODUCT_TOPPINGS_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_PRODUCT_TOPPINGS.csv",
						"folderPath": "Target/AzurreProject/stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PRODUCT_TOPPING_ID",
						"type": "String"
					},
					{
						"name": "TOPPING_NAME",
						"type": "String"
					},
					{
						"name": "TOPING_PRICE",
						"type": "String"
					},
					{
						"name": "IS_ACTIVE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dt_channel_ref')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_CHANNEL.csv",
						"folderPath": "Target/AzurreProject/stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CHANNEL_ID",
						"type": "String"
					},
					{
						"name": "CHANNEL_TYPE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dt_delivery_methods')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_DELIVERY_METHOD.csv",
						"folderPath": "Target/AzurreProject/stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DELIVERY_ID",
						"type": "String"
					},
					{
						"name": "DELIVERY_TYPE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dt_last_file_modified')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "aelisa"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dt_latest_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"fileSystem": "aelisa"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dt_payment_method')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_PAYMENT_METHOD.csv",
						"folderPath": "Target/AzurreProject/stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PAYMENT_ID",
						"type": "String"
					},
					{
						"name": "PAYMENT_TYPE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dt_tgt_latest_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": "NEWFolder",
						"fileSystem": "aelisa"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/filne_name_column')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "emp_file_column.csv",
						"folderPath": "target",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/lookup')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dept_lkp.csv",
						"folderPath": "source",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pivot_emp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "aelisa"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/source_lkp_frm')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "employee.csv",
						"folderPath": "source",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sourcedataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "employee.csv",
						"folderPath": "source",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_param')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "*.csv",
						"folderPath": "source/src_param",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_param1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "source/src_param",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/targetlkp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": "Target",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/targetparam')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "tgt_param_src",
						"folderPath": "Target",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tbl_countries')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "tbl_Countries.txt",
						"folderPath": "target",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tgtdataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkstgGen2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Target",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "emp_id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkstgGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('AzureSqlDatabase1_properties_typeProperties_server')]",
					"database": "[parameters('AzureSqlDatabase1_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('AzureSqlDatabase1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AzureSqlDatabase1_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Oracle1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('Oracle1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "SelfHostedIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SelfHostedIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkstgGen2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('linkstgGen2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('linkstgGen2_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pip_trigger",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 15,
						"startTime": "2024-10-04T18:44:00",
						"endTime": "2024-10-04T19:38:00",
						"timeZone": "Central Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pip_trigger')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SelfHostedIR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Customer_Stg')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "we have window and filter for the columns we can change some column change",
				"folder": {
					"name": "pizzaproject"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "df_Azure_Project_Stg_customer",
								"type": "DatasetReference"
							},
							"name": "sourceCustomer"
						},
						{
							"dataset": {
								"referenceName": "df_Azure_Project_Stg_email",
								"type": "DatasetReference"
							},
							"name": "sourceEmail"
						},
						{
							"dataset": {
								"referenceName": "df_Azure_Project_Stg_customer_Address",
								"type": "DatasetReference"
							},
							"name": "sourceCustomerAddress"
						},
						{
							"dataset": {
								"referenceName": "df_Azure_Project_Stg_customer_phone_number",
								"type": "DatasetReference"
							},
							"name": "sourcePhoneNumber"
						},
						{
							"dataset": {
								"referenceName": "df_Azure_Project_Stg_Hot_Lovers",
								"type": "DatasetReference"
							},
							"name": "sourceHotLovers"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "df_PizzaProject_Customer_DIM",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "window1"
						},
						{
							"name": "filterpHONEnUMBER"
						},
						{
							"name": "join1"
						},
						{
							"name": "join2"
						},
						{
							"name": "join3"
						},
						{
							"name": "join4"
						},
						{
							"name": "windowEMAIL"
						},
						{
							"name": "filterEMAIL"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "AggreAddress"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CUSTOMER_ID as short,",
						"          CUSTOMER_FIRST_NAME as string,",
						"          CUSTOMER_LAST_NAME as string,",
						"          CUSTOMER_DOB as date,",
						"          CUSTOMER_TYPE as string,",
						"          IS_LOYAL as boolean,",
						"          FIRST_PURCHASE_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceCustomer",
						"source(output(",
						"          CUSTOMER_EMAIL_ID as short,",
						"          CUSTOMER_EMAIL as string,",
						"          CUSTOMER_EMAIL_TYPE as string,",
						"          CUSTOMER_EMAIL_STATUS as string,",
						"          CUSTOMER_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceEmail",
						"source(output(",
						"          CUSTOMER_ADDRESS_ID as short,",
						"          ADDRESS_LANE1 as string,",
						"          ADDRESS_LANE_2 as string,",
						"          CITY_NAME as string,",
						"          STATE_NAME as string,",
						"          COUNTRY_NAME as string,",
						"          ZIP_CODE as integer,",
						"          GATE_CODE as short,",
						"          ADDRESS_TYPE as string,",
						"          ADDRESS_STATUS as string,",
						"          CUSTOMER_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceCustomerAddress",
						"source(output(",
						"          CUSTOMER_PHONE_NUMBER_ID as short,",
						"          CUSTOMER_PHONE_NUMBER as string,",
						"          CUSTOMER_PHONE_TYPE as string,",
						"          CUSTOMER_PHONE_STATUS as string,",
						"          CUSTOMER_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourcePhoneNumber",
						"source(output(",
						"          HUT_LOVERS_ID as short,",
						"          JOINING_DATE as string,",
						"          IS_ACTIVE as boolean,",
						"          MEMBER_ID as short,",
						"          CUSTMOER_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceHotLovers",
						"sourcePhoneNumber window(over(CUSTOMER_ID),",
						"     desc(CUSTOMER_PHONE_TYPE, true),",
						"     SecondaryNo = lead(CUSTOMER_PHONE_NUMBER),",
						"          RN = rowNumber()) ~> window1",
						"window1 filter(RN==1) ~> filterpHONEnUMBER",
						"sourceCustomer, filterEMAIL join(sourceCustomer@CUSTOMER_ID == sourceEmail@CUSTOMER_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1, AggreAddress join(sourceCustomer@CUSTOMER_ID == AggreAddress@CUSTOMER_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2, filterpHONEnUMBER join(sourceCustomer@CUSTOMER_ID == sourcePhoneNumber@CUSTOMER_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3, sourceHotLovers join(sourceCustomer@CUSTOMER_ID == CUSTMOER_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"sourceEmail window(over(CUSTOMER_ID),",
						"     asc(CUSTOMER_EMAIL_TYPE, true),",
						"     Secondary_Email = lead(CUSTOMER_EMAIL),",
						"          RN = rowNumber()) ~> windowEMAIL",
						"windowEMAIL filter(RN==1) ~> filterEMAIL",
						"sourceCustomerAddress derive(o_ADDRESS_LANE1 = iif(ADDRESS_TYPE=='Office',ADDRESS_LANE1,toString(null())),",
						"          o_ADDRESS_LANE_2 = iif(ADDRESS_TYPE=='Office',ADDRESS_LANE_2,toString(null())),",
						"          o_CITY_NAME = iif(ADDRESS_TYPE=='Office',CITY_NAME,toString(null())),",
						"          o_STATE_NAME = iif(ADDRESS_TYPE=='Office',STATE_NAME,toString(null())),",
						"          o_COUNTRY_NAME = iif(ADDRESS_TYPE=='Office',COUNTRY_NAME,toString(null())),",
						"          o_ZIP_CODE = iif(ADDRESS_TYPE=='Office',ZIP_CODE,toInteger(null())),",
						"          o_GATE_CODE = iif(ADDRESS_TYPE=='Office',GATE_CODE,toShort(null())),",
						"          r_ADDRESS_LANE1 = iif(ADDRESS_TYPE=='Residential',ADDRESS_LANE1,toString(null())),",
						"          r_ADDRESS_LANE_2 = iif(ADDRESS_TYPE=='Residential',ADDRESS_LANE_2,toString(null())),",
						"          r_CITY_NAME = iif(ADDRESS_TYPE=='Residential',CITY_NAME,toString(null())),",
						"          r_STATE_NAME = iif(ADDRESS_TYPE=='Residential',STATE_NAME,toString(null())),",
						"          r_COUNTRY_NAME = iif(ADDRESS_TYPE=='Residential',COUNTRY_NAME,toString(null())),",
						"          r_ZIP_CODE = iif(ADDRESS_TYPE=='Residential',ZIP_CODE,toInteger(null())),",
						"          r_GATE_CODE = iif(ADDRESS_TYPE=='Residential',GATE_CODE,toShort(null()))) ~> derivedColumn1",
						"derivedColumn1 aggregate(groupBy(CUSTOMER_ID),",
						"     Office_ADDRESS_LANE1 = max(o_ADDRESS_LANE1),",
						"          Office_ADDRESS_LANE_2 = max(o_ADDRESS_LANE_2),",
						"          Office_CITY_NAME = max(o_CITY_NAME),",
						"          Office_STATE_NAME = max(o_STATE_NAME),",
						"          Office_COUNTRY_NAME = max(o_COUNTRY_NAME),",
						"          Office_ZIP_CODE = max(o_ZIP_CODE),",
						"          Office_GATE_CODE = max(o_GATE_CODE),",
						"          Residential_ADDRESS_LANE1 = max(r_ADDRESS_LANE1),",
						"          Residential_ADDRESS_LANE_2 = max(r_ADDRESS_LANE_2),",
						"          Residential_CITY_NAME = max(r_CITY_NAME),",
						"          Residential_STATE_NAME = max(r_STATE_NAME),",
						"          Residential_COUNTRY_NAME = max(r_COUNTRY_NAME),",
						"          Residential_ZIP_CODE = max(r_ZIP_CODE),",
						"          Residential_GATE_CODE = max(r_GATE_CODE)) ~> AggreAddress",
						"derivedColumn2 select(mapColumn(",
						"          CUSTOMER_ID = sourceCustomer@CUSTOMER_ID,",
						"          CUSTOMER_FIRST_NAME,",
						"          CUSTOMER_LAST_NAME,",
						"          IS_LOYAL,",
						"          CUSTOMER_EMAIL,",
						"          Secondary_Email,",
						"          Office_ADDRESS_LANE1,",
						"          Office_ADDRESS_LANE_2,",
						"          Office_CITY_NAME,",
						"          Office_STATE_NAME,",
						"          Office_COUNTRY_NAME,",
						"          Office_ZIP_CODE,",
						"          Office_GATE_CODE,",
						"          Residential_ADDRESS_LANE1,",
						"          Residential_ADDRESS_LANE_2,",
						"          Residential_CITY_NAME,",
						"          Residential_STATE_NAME,",
						"          Residential_COUNTRY_NAME,",
						"          Residential_ZIP_CODE,",
						"          Residential_GATE_CODE,",
						"          CUSTOMER_PHONE_NUMBER,",
						"          SecondaryNo,",
						"          JOINING_DATE,",
						"          USER_CREATE_DATE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"join4 derive(USER_CREATE_DATE = currentUTC()) ~> derivedColumn2",
						"select1 keyGenerate(output(CUSTOMER_DIM_KEY as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 select(mapColumn(",
						"          CUSTOMER_DIM_KEY,",
						"          CUSTOMER_ID,",
						"          CUSTOMER_FIRST_NAME,",
						"          CUSTOMER_LAST_NAME,",
						"          IS_LOYAL,",
						"          CUSTOMER_EMAIL,",
						"          Secondary_Email,",
						"          CUSTOMER_PHONE_NUMBER,",
						"          SecondaryNo,",
						"          Office_ADDRESS_LANE1,",
						"          Office_ADDRESS_LANE_2,",
						"          Office_CITY_NAME,",
						"          Office_STATE_NAME,",
						"          Office_COUNTRY_NAME,",
						"          Office_ZIP_CODE,",
						"          Office_GATE_CODE,",
						"          Residential_ADDRESS_LANE1,",
						"          Residential_ADDRESS_LANE_2,",
						"          Residential_CITY_NAME,",
						"          Residential_STATE_NAME,",
						"          Residential_COUNTRY_NAME,",
						"          Residential_ZIP_CODE,",
						"          Residential_GATE_CODE,",
						"          JOINING_DATE,",
						"          USER_CREATE_DATE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CUSTOMER_DIM_KEY,",
						"          CUSTOMER_ID,",
						"          CUSTOMER_FIRST_NAME,",
						"          CUSTOMER_LAST_NAME,",
						"          IS_LOYAL,",
						"          CUSTOMER_EMAIL,",
						"          Secondary_Email,",
						"          CUSTOMER_PHONE_NUMBER,",
						"          SecondaryNo,",
						"          Office_ADDRESS_LANE1,",
						"          Office_ADDRESS_LANE_2,",
						"          Office_CITY_NAME,",
						"          Office_STATE_NAME,",
						"          Office_COUNTRY_NAME,",
						"          Office_ZIP_CODE,",
						"          Office_GATE_CODE,",
						"          Residential_ADDRESS_LANE1,",
						"          Residential_ADDRESS_LANE_2,",
						"          Residential_CITY_NAME,",
						"          Residential_STATE_NAME,",
						"          Residential_COUNTRY_NAME,",
						"          Residential_ZIP_CODE,",
						"          Residential_GATE_CODE,",
						"          JOINING_DATE,",
						"          USER_CREATE_DATE",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/df_Azure_Project_Stg_customer')]",
				"[concat(variables('factoryId'), '/datasets/df_Azure_Project_Stg_email')]",
				"[concat(variables('factoryId'), '/datasets/df_Azure_Project_Stg_customer_Address')]",
				"[concat(variables('factoryId'), '/datasets/df_Azure_Project_Stg_customer_phone_number')]",
				"[concat(variables('factoryId'), '/datasets/df_Azure_Project_Stg_Hot_Lovers')]",
				"[concat(variables('factoryId'), '/datasets/df_PizzaProject_Customer_DIM')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Customer_Stg_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "we can do here mapping with derived column and aggregator",
				"folder": {
					"name": "pizzaproject"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "df_Azure_Project_Stg_customer",
								"type": "DatasetReference"
							},
							"name": "sourceCustomer"
						},
						{
							"dataset": {
								"referenceName": "df_Azure_Project_Stg_email",
								"type": "DatasetReference"
							},
							"name": "sourceEmail"
						},
						{
							"dataset": {
								"referenceName": "df_Azure_Project_Stg_customer_Address",
								"type": "DatasetReference"
							},
							"name": "sourceCustomerAddress"
						},
						{
							"dataset": {
								"referenceName": "df_Azure_Project_Stg_customer_phone_number",
								"type": "DatasetReference"
							},
							"name": "sourcePhoneNumber"
						},
						{
							"dataset": {
								"referenceName": "df_Azure_Project_Stg_Hot_Lovers",
								"type": "DatasetReference"
							},
							"name": "sourceHotLovers"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AZURE_TESTING",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "join2"
						},
						{
							"name": "join3"
						},
						{
							"name": "join4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "AggreAddress"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "AGGREPHONENUMBER"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "AGGREEMAIL"
						},
						{
							"name": "surrogateKeycUSTOMERDIMKEY"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CUSTOMER_ID as short,",
						"          CUSTOMER_FIRST_NAME as string,",
						"          CUSTOMER_LAST_NAME as string,",
						"          CUSTOMER_DOB as date,",
						"          CUSTOMER_TYPE as string,",
						"          IS_LOYAL as boolean,",
						"          FIRST_PURCHASE_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceCustomer",
						"source(output(",
						"          CUSTOMER_EMAIL_ID as short,",
						"          CUSTOMER_EMAIL as string,",
						"          CUSTOMER_EMAIL_TYPE as string,",
						"          CUSTOMER_EMAIL_STATUS as string,",
						"          CUSTOMER_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceEmail",
						"source(output(",
						"          CUSTOMER_ADDRESS_ID as short,",
						"          ADDRESS_LANE1 as string,",
						"          ADDRESS_LANE_2 as string,",
						"          CITY_NAME as string,",
						"          STATE_NAME as string,",
						"          COUNTRY_NAME as string,",
						"          ZIP_CODE as integer,",
						"          GATE_CODE as short,",
						"          ADDRESS_TYPE as string,",
						"          ADDRESS_STATUS as string,",
						"          CUSTOMER_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceCustomerAddress",
						"source(output(",
						"          CUSTOMER_PHONE_NUMBER_ID as short,",
						"          CUSTOMER_PHONE_NUMBER as string,",
						"          CUSTOMER_PHONE_TYPE as string,",
						"          CUSTOMER_PHONE_STATUS as string,",
						"          CUSTOMER_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourcePhoneNumber",
						"source(output(",
						"          HUT_LOVERS_ID as short,",
						"          JOINING_DATE as string,",
						"          IS_ACTIVE as boolean,",
						"          MEMBER_ID as short,",
						"          CUSTMOER_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceHotLovers",
						"sourceCustomer, AGGREEMAIL join(sourceCustomer@CUSTOMER_ID == AGGREEMAIL@CUSTOMER_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1, AggreAddress join(sourceCustomer@CUSTOMER_ID == AggreAddress@CUSTOMER_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2, AGGREPHONENUMBER join(sourceCustomer@CUSTOMER_ID == AGGREPHONENUMBER@CUSTOMER_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3, sourceHotLovers join(sourceCustomer@CUSTOMER_ID == CUSTMOER_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"sourceCustomerAddress derive(o_ADDRESS_LANE1 = iif(ADDRESS_TYPE=='Office',ADDRESS_LANE1,toString(null())),",
						"          o_ADDRESS_LANE_2 = iif(ADDRESS_TYPE=='Office',ADDRESS_LANE_2,toString(null())),",
						"          o_CITY_NAME = iif(ADDRESS_TYPE=='Office',CITY_NAME,toString(null())),",
						"          o_STATE_NAME = iif(ADDRESS_TYPE=='Office',STATE_NAME,toString(null())),",
						"          o_COUNTRY_NAME = iif(ADDRESS_TYPE=='Office',COUNTRY_NAME,toString(null())),",
						"          o_ZIP_CODE = iif(ADDRESS_TYPE=='Office',ZIP_CODE,toInteger(null())),",
						"          o_GATE_CODE = iif(ADDRESS_TYPE=='Office',GATE_CODE,toShort(null())),",
						"          r_ADDRESS_LANE1 = iif(ADDRESS_TYPE=='Residential',ADDRESS_LANE1,toString(null())),",
						"          r_ADDRESS_LANE_2 = iif(ADDRESS_TYPE=='Residential',ADDRESS_LANE_2,toString(null())),",
						"          r_CITY_NAME = iif(ADDRESS_TYPE=='Residential',CITY_NAME,toString(null())),",
						"          r_STATE_NAME = iif(ADDRESS_TYPE=='Residential',STATE_NAME,toString(null())),",
						"          r_COUNTRY_NAME = iif(ADDRESS_TYPE=='Residential',COUNTRY_NAME,toString(null())),",
						"          r_ZIP_CODE = iif(ADDRESS_TYPE=='Residential',ZIP_CODE,toInteger(null())),",
						"          r_GATE_CODE = iif(ADDRESS_TYPE=='Residential',GATE_CODE,toShort(null()))) ~> derivedColumn1",
						"derivedColumn1 aggregate(groupBy(CUSTOMER_ID),",
						"     Office_ADDRESS_LANE1 = max(o_ADDRESS_LANE1),",
						"          Office_ADDRESS_LANE_2 = max(o_ADDRESS_LANE_2),",
						"          Office_CITY_NAME = max(o_CITY_NAME),",
						"          Office_STATE_NAME = max(o_STATE_NAME),",
						"          Office_COUNTRY_NAME = max(o_COUNTRY_NAME),",
						"          Office_ZIP_CODE = max(o_ZIP_CODE),",
						"          Office_GATE_CODE = max(o_GATE_CODE),",
						"          Residential_ADDRESS_LANE1 = max(r_ADDRESS_LANE1),",
						"          Residential_ADDRESS_LANE_2 = max(r_ADDRESS_LANE_2),",
						"          Residential_CITY_NAME = max(r_CITY_NAME),",
						"          Residential_STATE_NAME = max(r_STATE_NAME),",
						"          Residential_COUNTRY_NAME = max(r_COUNTRY_NAME),",
						"          Residential_ZIP_CODE = max(r_ZIP_CODE),",
						"          Residential_GATE_CODE = max(r_GATE_CODE)) ~> AggreAddress",
						"derivedColumn2 select(mapColumn(",
						"          CUSTOMER_ID = sourceCustomer@CUSTOMER_ID,",
						"          CUSTOMER_FIRST_NAME,",
						"          CUSTOMER_LAST_NAME,",
						"          IS_LOYAL,",
						"          PRIMARY_EMAIL,",
						"          SECONDARY_EMAIL,",
						"          Office_ADDRESS_LANE1,",
						"          Office_ADDRESS_LANE_2,",
						"          Office_CITY_NAME,",
						"          Office_STATE_NAME,",
						"          Office_COUNTRY_NAME,",
						"          Office_ZIP_CODE,",
						"          Office_GATE_CODE,",
						"          Residential_ADDRESS_LANE1,",
						"          Residential_ADDRESS_LANE_2,",
						"          Residential_CITY_NAME,",
						"          Residential_STATE_NAME,",
						"          Residential_COUNTRY_NAME,",
						"          Residential_ZIP_CODE,",
						"          Residential_GATE_CODE,",
						"          PRIMARY_PHONE_NUMBER,",
						"          SECONDARY_PHONE_NUMBER,",
						"          JOINING_DATE,",
						"          USER_CREATE_DATE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"join4 derive(USER_CREATE_DATE = currentUTC()) ~> derivedColumn2",
						"sourcePhoneNumber derive(HOME_PHONE_NUMBER = iif(CUSTOMER_PHONE_TYPE == 'Home',CUSTOMER_PHONE_NUMBER,toString(null())),",
						"          CELL_PHONE_NUMBER = iif(CUSTOMER_PHONE_TYPE == 'Cell',CUSTOMER_PHONE_NUMBER,toString(null()))) ~> derivedColumn3",
						"derivedColumn3 aggregate(groupBy(CUSTOMER_ID),",
						"     PRIMARY_PHONE_NUMBER = max(HOME_PHONE_NUMBER),",
						"          SECONDARY_PHONE_NUMBER = max(CELL_PHONE_NUMBER)) ~> AGGREPHONENUMBER",
						"sourceEmail derive(PRIMARY_CUSTOMER_EMAIL = iif(CUSTOMER_EMAIL_TYPE == 'Primary',CUSTOMER_EMAIL,toString(null())),",
						"          SECONDARY_CUSTOMER_EMAIL = iif(CUSTOMER_EMAIL_TYPE == 'Secondary',CUSTOMER_EMAIL,toString(null()))) ~> derivedColumn4",
						"derivedColumn4 aggregate(groupBy(CUSTOMER_ID),",
						"     PRIMARY_EMAIL = max(PRIMARY_CUSTOMER_EMAIL),",
						"          SECONDARY_EMAIL = max(SECONDARY_CUSTOMER_EMAIL)) ~> AGGREEMAIL",
						"select1 keyGenerate(output(CUSTOMER_DIM_KEY as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKeycUSTOMERDIMKEY",
						"surrogateKeycUSTOMERDIMKEY select(mapColumn(",
						"          CUSTOMER_DIM_KEY,",
						"          CUSTOMER_ID,",
						"          CUSTOMER_FIRST_NAME,",
						"          CUSTOMER_LAST_NAME,",
						"          IS_LOYAL,",
						"          PRIMARY_EMAIL,",
						"          SECONDARY_EMAIL,",
						"          PRIMARY_PHONE_NUMBER,",
						"          SECONDARY_PHONE_NUMBER,",
						"          Office_ADDRESS_LANE1,",
						"          Office_ADDRESS_LANE_2,",
						"          Office_CITY_NAME,",
						"          Office_STATE_NAME,",
						"          Office_COUNTRY_NAME,",
						"          Office_ZIP_CODE,",
						"          Office_GATE_CODE,",
						"          Residential_ADDRESS_LANE1,",
						"          Residential_ADDRESS_LANE_2,",
						"          Residential_CITY_NAME,",
						"          Residential_STATE_NAME,",
						"          Residential_COUNTRY_NAME,",
						"          Residential_ZIP_CODE,",
						"          Residential_GATE_CODE,",
						"          JOINING_DATE,",
						"          USER_CREATE_DATE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/df_Azure_Project_Stg_customer')]",
				"[concat(variables('factoryId'), '/datasets/df_Azure_Project_Stg_email')]",
				"[concat(variables('factoryId'), '/datasets/df_Azure_Project_Stg_customer_Address')]",
				"[concat(variables('factoryId'), '/datasets/df_Azure_Project_Stg_customer_phone_number')]",
				"[concat(variables('factoryId'), '/datasets/df_Azure_Project_Stg_Hot_Lovers')]",
				"[concat(variables('factoryId'), '/datasets/AZURE_TESTING')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_DepWiseLeadLagRankDensRankRowNumber')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_data_Target_DataLoad_employee_csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_aelisa_DepWiseSalary_csv",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "cast1"
						},
						{
							"name": "window1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as short,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as double,",
						"          COMMISSION_PCT as double,",
						"          MANAGER_ID as short,",
						"          DEPARTMENT_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 cast(output(",
						"          EMPLOYEE_ID as integer,",
						"          SALARY as decimal(10,2),",
						"          COMMISSION_PCT as decimal(5,2),",
						"          DEPARTMENT_ID as integer",
						"     ),",
						"     errors: true) ~> cast1",
						"cast1 window(over(DEPARTMENT_ID),",
						"     asc(SALARY, true),",
						"     LEAD_Salary = lead(SALARY),",
						"          LAG_Salary = lag(SALARY),",
						"          Rank = rank(),",
						"          DenseRank = denseRank(),",
						"          RowNumber = rowNumber()) ~> window1",
						"window1 select(mapColumn(",
						"          EMPLOYEE_ID,",
						"          FIRST_NAME,",
						"          DEPARTMENT_ID,",
						"          SALARY,",
						"          LEAD_Salary,",
						"          LAG_Salary,",
						"          Rank,",
						"          DenseRank,",
						"          RowNumber",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['DepWiseLeadLagRankDensRankRowNumber.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_data_Target_DataLoad_employee_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_aelisa_DepWiseSalary_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_LOCATION_DIM')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "pizzaproject"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_stg_STATE_COUNTRY",
								"type": "DatasetReference"
							},
							"name": "STATECOUNTRY"
						},
						{
							"dataset": {
								"referenceName": "df_STG_STORE_LOCATION",
								"type": "DatasetReference"
							},
							"name": "STGSTORELOCATION"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "df_pizzaproject_Location_DIM",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          STATE_COUNTRY_ID as short,",
						"          STATE_NAME as string,",
						"          STATE_ABBREVATION as string,",
						"          STATE_COUNTRY as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> STATECOUNTRY",
						"source(output(",
						"          STORE_LOCATION_ID as short,",
						"          STORE_NAME as string,",
						"          STORE_ADDRESS as string,",
						"          STORE_PHONE_NUMBER as string,",
						"          STORE_OPEN_TIME as string,",
						"          STORE_CLOSE_TIME as string,",
						"          STATE_COUNTRY_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> STGSTORELOCATION",
						"STGSTORELOCATION, STATECOUNTRY join(STGSTORELOCATION@STATE_COUNTRY_ID == STATECOUNTRY@STATE_COUNTRY_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          STORE_LOCATION_ID,",
						"          STORE_NAME,",
						"          STORE_ADDRESS,",
						"          STORE_PHONE_NUMBER,",
						"          STORE_OPEN_TIME,",
						"          STORE_CLOSE_TIME,",
						"          STATE_NAME,",
						"          STATE_COUNTRY",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 keyGenerate(output({Location_Dim_Key } as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(CREATE_USER_DATE = currentUTC()) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          {Location_Dim_Key },",
						"          STORE_LOCATION_ID,",
						"          STORE_NAME,",
						"          STORE_ADDRESS,",
						"          STORE_PHONE_NUMBER,",
						"          STORE_OPEN_TIME,",
						"          STORE_CLOSE_TIME,",
						"          STATE_NAME,",
						"          STATE_COUNTRY,",
						"          CREATE_USER_DATE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_stg_STATE_COUNTRY')]",
				"[concat(variables('factoryId'), '/datasets/df_STG_STORE_LOCATION')]",
				"[concat(variables('factoryId'), '/datasets/df_pizzaproject_Location_DIM')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Member_Loyalty_FACT')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "pizzaproject"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableMemberLoyalty1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableMember_Loyalty_FACT",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Member_id as integer,",
						"          CUSTOMER_DIM_KEY as long,",
						"          loc_dim_key as integer,",
						"          Date_Key as string,",
						"          Order_ID as integer,",
						"          Total_Points_Earned as integer,",
						"          Remaining_points as integer,",
						"          Is_Active as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select \\r\\nmem.Member_id as Member_id,\\r\\ncust.CUSTOMER_DIM_KEY as CUSTOMER_DIM_KEY,\\r\\nloc.loc_dim_key as loc_dim_key,\\r\\ndt.Date_Key as Date_Key,\\r\\nord.Order_ID as Order_ID,\\r\\nmem.Total_Points_Earned as Total_Points_Earned,\\r\\nmem.Remaining_points as Remaining_points,\\r\\nmem.Is_Active as Is_Active\\r\\nfrom \\r\\nhr.member_loyalty mem \\r\\nJOIN [hr].[Order] ord ON mem.order_id = ord.order_id\\r\\njoin hr.CUSTOMER_DIM cust ON cust.customer_id = ord.customer_id \\r\\nJOIN hr.LOCATION_DIM1 loc ON loc.store_location_id = ord.store_location_id\\r\\nJOIN hr.Date_data dt ON ord.order_date = dt.day_yyyy_mm_dd',",
						"     format: 'query') ~> source1",
						"source1 derive(o_Create_date = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Member_id as integer,",
						"          CUSTOMER_DIM_KEY as long,",
						"          loc_dim_key as integer,",
						"          Date_Key as string,",
						"          Order_ID as integer,",
						"          Total_Points_Earned as integer,",
						"          Remaining_points as integer,",
						"          Is_Active as string,",
						"          DM_create_date as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Member_id,",
						"          CUSTOMER_DIM_KEY,",
						"          loc_dim_key,",
						"          Date_Key,",
						"          Order_ID,",
						"          Total_Points_Earned,",
						"          Remaining_points,",
						"          Is_Active,",
						"          DM_create_date = o_Create_date",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableMemberLoyalty1')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableMember_Loyalty_FACT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Member_Loyalty_FACT_with_joinner')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "pizzaproject"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableMemberLoyalty1",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableOrder",
								"type": "DatasetReference"
							},
							"name": "source2"
						},
						{
							"dataset": {
								"referenceName": "df_PizzaProject_Customer_DIM",
								"type": "DatasetReference"
							},
							"name": "source3"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableHRLOCATION_DIM1",
								"type": "DatasetReference"
							},
							"name": "source4"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableDate",
								"type": "DatasetReference"
							},
							"name": "source5"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableMember_Loyalty_FACT",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "join1"
						},
						{
							"name": "join2"
						},
						{
							"name": "join3"
						},
						{
							"name": "join4"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Member_id as integer,",
						"          CUSTOMER_DIM_KEY as long,",
						"          loc_dim_key as integer,",
						"          Date_Key as string,",
						"          Order_ID as integer,",
						"          Total_Points_Earned as integer,",
						"          Remaining_points as integer,",
						"          Is_Active as string,",
						"          DM_create_date as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source(output(",
						"          ORDER_ID as integer,",
						"          ORDER_DATE as date,",
						"          ORDER_STATUS as string,",
						"          TOTAL_AMOUNT as decimal(10,2),",
						"          TOTAL_TAX as decimal(10,2),",
						"          TIPS as decimal(10,2),",
						"          TOTAL_QUANTITY as integer,",
						"          DELIVERY_ID as integer,",
						"          CHANNEL_ID as integer,",
						"          STORE_LOCATION_ID as integer,",
						"          CUSTOMER_ID as integer,",
						"          PAYMENT_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source2",
						"source(output(",
						"          CUSTOMER_DIM_KEY as long,",
						"          CUSTOMER_ID as short,",
						"          CUSTOMER_FIRST_NAME as string,",
						"          CUSTOMER_LAST_NAME as string,",
						"          IS_LOYAL as boolean,",
						"          CUSTOMER_EMAIL as string,",
						"          Secondary_Email as string,",
						"          CUSTOMER_PHONE_NUMBER as string,",
						"          SecondaryNo as string,",
						"          Office_ADDRESS_LANE1 as string,",
						"          Office_ADDRESS_LANE_2 as string,",
						"          Office_CITY_NAME as string,",
						"          Office_STATE_NAME as string,",
						"          Office_COUNTRY_NAME as string,",
						"          Office_ZIP_CODE as integer,",
						"          Office_GATE_CODE as short,",
						"          Residential_ADDRESS_LANE1 as string,",
						"          Residential_ADDRESS_LANE_2 as string,",
						"          Residential_CITY_NAME as string,",
						"          Residential_STATE_NAME as string,",
						"          Residential_COUNTRY_NAME as string,",
						"          Residential_ZIP_CODE as integer,",
						"          Residential_GATE_CODE as short,",
						"          JOINING_DATE as string,",
						"          USER_CREATE_DATE as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source3",
						"source(output(",
						"          Loc_Dim_Key as integer,",
						"          Store_Location_ID as integer,",
						"          Store_Name as string,",
						"          Store_Address as string,",
						"          Store_Open_Time as string,",
						"          Store_Close_Time as string,",
						"          State_Name as string,",
						"          FLAG as string,",
						"          DM_CREATE_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source4",
						"source(output(",
						"          DATE_KEY as string,",
						"          DAY_YYYY_MM_DD as timestamp,",
						"          DAY_US_MM_DD_YYYY as timestamp,",
						"          DAY_US_LONG as string,",
						"          DAY_US_M_D_YY as timestamp,",
						"          WEEK_SHORT as string,",
						"          WEEK_NUMBER as string,",
						"          WEEK_LONG as string,",
						"          MONTH_IN_QUARTER_NUMBER as string,",
						"          MONTH_IN_YEAR_SHORT as string,",
						"          MONTH_IN_YEAR_LONG as string,",
						"          WEEK_WK_QTR_YEAR as string,",
						"          WEEK_FROM_TO as string,",
						"          WEEK_STARTING as string,",
						"          WEEK_WK_YEAR_CONT as string,",
						"          WEEK_WK_YEAR as string,",
						"          WEEK_WK_QTR_YEAR_CONT as string,",
						"          DAY_IN_WEEK_SHORT as string,",
						"          DAY_IN_WEEK_NUMBER as string,",
						"          DAY_IN_WEEK_LONG as string,",
						"          MONTH_SHORT as string,",
						"          MONTH_NUMBER as string,",
						"          MONTH_LONG as string,",
						"          QUARTER_SHORT_US as string,",
						"          YEAR as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source5",
						"source5 derive(o_day_mm_dd_yyyy = toDate(fromUTC(DAY_YYYY_MM_DD, 'MM/dd/yyyy'))) ~> derivedColumn1",
						"source1, source2 join(source1@Order_ID == source2@ORDER_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1, source3 join(source2@CUSTOMER_ID == source3@CUSTOMER_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2, source4 join(source2@STORE_LOCATION_ID == source4@Store_Location_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3, derivedColumn1 join(ORDER_DATE == o_day_mm_dd_yyyy,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"select2 derive(o_Create_Date = currentDate()) ~> derivedColumn2",
						"join4 select(mapColumn(",
						"          Member_id,",
						"          ORDER_ID = source2@ORDER_ID,",
						"          CUSTOMER_DIM_KEY = source3@CUSTOMER_DIM_KEY,",
						"          loc_dim_key = source1@loc_dim_key,",
						"          DATE_KEY = source5@DATE_KEY,",
						"          Total_Points_Earned,",
						"          Remaining_points,",
						"          Is_Active,",
						"          DM_create_date = source1@DM_create_date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"derivedColumn2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Member_id as integer,",
						"          CUSTOMER_DIM_KEY as long,",
						"          loc_dim_key as integer,",
						"          Date_Key as string,",
						"          Order_ID as integer,",
						"          Total_Points_Earned as integer,",
						"          Remaining_points as integer,",
						"          Is_Active as string,",
						"          DM_create_date as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Member_id,",
						"          CUSTOMER_DIM_KEY,",
						"          loc_dim_key,",
						"          Date_Key = DATE_KEY,",
						"          Order_ID = ORDER_ID,",
						"          Total_Points_Earned,",
						"          Remaining_points,",
						"          Is_Active,",
						"          DM_create_date = o_Create_Date",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableMemberLoyalty1')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableOrder')]",
				"[concat(variables('factoryId'), '/datasets/df_PizzaProject_Customer_DIM')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableHRLOCATION_DIM1')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableDate')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableMember_Loyalty_FACT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_OrderLine_1_TO_OrderLine')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "pizzaproject"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableOrderLine1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableOrderLine1Sink",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "cast1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ORDER_LINE_ID as string,",
						"          UNIT_PRICE as string,",
						"          QUANTITY as string,",
						"          PROMOTION_AMOUNT as string,",
						"          PROMOTION_ID as string,",
						"          ORDER_ID as string,",
						"          PRODUCT_ID as string,",
						"          PRODUCT_TOPPING_ID as string,",
						"          TOTAL_AMOUNT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 cast(output(",
						"          ORDER_LINE_ID as integer,",
						"          UNIT_PRICE as decimal(10,2),",
						"          QUANTITY as integer,",
						"          PROMOTION_AMOUNT as decimal(10,2),",
						"          PROMOTION_ID as integer,",
						"          ORDER_ID as integer,",
						"          PRODUCT_ID as integer,",
						"          PRODUCT_TOPPING_ID as integer",
						"     ),",
						"     errors: true) ~> cast1",
						"cast1 select(mapColumn(",
						"          ORDER_LINE_ID,",
						"          UNIT_PRICE,",
						"          QUANTITY,",
						"          PROMOTION_AMOUNT,",
						"          PROMOTION_ID,",
						"          ORDER_ID,",
						"          PRODUCT_ID,",
						"          PRODUCT_TOPPING_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableOrderLine1')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableOrderLine1Sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Order_1_To_Order')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "pizzaproject"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableOrder1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableOrder1sink",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "cast1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ORDER_ID as string,",
						"          ORDER_DATE as string,",
						"          ORDER_STATUS as string,",
						"          TOTAL_AMOUNT as string,",
						"          TOTAL_TAX as string,",
						"          TIPS as string,",
						"          TOTAL_QUANTITY as string,",
						"          DELIVERY_ID as string,",
						"          CHANNEL_ID as string,",
						"          STORE_LOCATION_ID as string,",
						"          CUSTOMER_ID as string,",
						"          PAYMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 cast(output(",
						"          ORDER_ID as integer,",
						"          ORDER_DATE as date 'MM/dd/yyyy',",
						"          ORDER_STATUS as string,",
						"          TOTAL_AMOUNT as decimal(10,2),",
						"          TOTAL_TAX as decimal(10,2),",
						"          TIPS as decimal(10,2),",
						"          TOTAL_QUANTITY as integer,",
						"          DELIVERY_ID as integer,",
						"          CHANNEL_ID as integer,",
						"          STORE_LOCATION_ID as integer,",
						"          CUSTOMER_ID as integer,",
						"          PAYMENT_ID as integer",
						"     ),",
						"     errors: true) ~> cast1",
						"cast1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableOrder1')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableOrder1sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_PRODUCT')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "pizzaproject"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_PRODUCT",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ds_PRODUCT_SUBCATEGORY",
								"type": "DatasetReference"
							},
							"name": "source2"
						},
						{
							"dataset": {
								"referenceName": "ds_PRODUCT_CATEGORY",
								"type": "DatasetReference"
							},
							"name": "source3"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableProduct",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "join2"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PRODUCT_ID as short,",
						"          PRODUCT_NAME as string,",
						"          PRODUCT_PRICE as string,",
						"          PRODUCT_DESCRIPTION as string,",
						"          CALORIES as string,",
						"          IS_ACTIVE as string,",
						"          PRODUCT_SUBCATEGORY_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          PRODUCT_SUBCATEGORY_ID as short,",
						"          PRODUCT_SUBCATEGORY_NAME as string,",
						"          PRODUCT_SIZE as string,",
						"          PRODUCT_CATEGORY_ID as short,",
						"          IS_ACTIVE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source(output(",
						"          PRODUCT_CATEGORY_ID as short,",
						"          PRODUCT_CATEGORY_NAME as string,",
						"          PRODUCT_CATEGORY_DESCRIPTION as string,",
						"          IS_ACTIVE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source3",
						"source1, source2 join(source1@PRODUCT_SUBCATEGORY_ID == source2@PRODUCT_SUBCATEGORY_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1, source3 join(source2@PRODUCT_CATEGORY_ID == source3@PRODUCT_CATEGORY_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 select(mapColumn(",
						"          PRODUCT_ID,",
						"          PRODUCT_NAME,",
						"          PRODUCT_PRICE,",
						"          PRODUCT_DESCRIPTION,",
						"          IS_ACTIVE = source1@IS_ACTIVE,",
						"          PRODUCT_SUBCATEGORY_ID = source2@PRODUCT_SUBCATEGORY_ID,",
						"          PRODUCT_SUBCATEGORY_NAME,",
						"          PRODUCT_SIZE,",
						"          PRODUCT_CATEGORY_ID = source3@PRODUCT_CATEGORY_ID,",
						"          PRODUCT_CATEGORY_NAME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"surrogateKey1 derive(CREATE_USER_DATE = currentUTC(),",
						"          o_Product_Price = replace(PRODUCT_PRICE, '$', '')) ~> derivedColumn1",
						"select1 keyGenerate(output(PRODUCT_DIM_KEY as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"derivedColumn1 select(mapColumn(",
						"          PRODUCT_DIM_KEY,",
						"          PRODUCT_ID,",
						"          PRODUCT_NAME,",
						"          PRODUCT_PRICE = o_Product_Price,",
						"          PRODUCT_DESCRIPTION,",
						"          IS_ACTIVE,",
						"          PRODUCT_SUBCATEGORY_ID,",
						"          PRODUCT_SUBCATEGORY_NAME,",
						"          PRODUCT_SIZE,",
						"          PRODUCT_CATEGORY_ID,",
						"          PRODUCT_CATEGORY_NAME,",
						"          CREATE_USER_DATE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_PRODUCT')]",
				"[concat(variables('factoryId'), '/datasets/ds_PRODUCT_SUBCATEGORY')]",
				"[concat(variables('factoryId'), '/datasets/ds_PRODUCT_CATEGORY')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableProduct')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_PRODUCT_TOPPINGs')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "pizzaproject"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dt_STG_PRODUCT_TOPPINGS_csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable_PRODUCT_TOPPINGS_dim",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_PRODUCT_TOPPINGS_dim",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable_PRODUCT_TOPPINGS_dim",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filterInsert"
						},
						{
							"name": "filterupdate"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PRODUCT_TOPPING_ID as short,",
						"          TOPPING_NAME as string,",
						"          TOPING_PRICE as string,",
						"          IS_ACTIVE as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          Product_Topping_Dim_Key as integer,",
						"          Product_Topping_ID as integer,",
						"          Topping_Name as string,",
						"          Topping_Price as decimal(5,2),",
						"          Is_Active as string,",
						"          Effective_Date as date,",
						"          END_DATE as date,",
						"          Flag as string,",
						"          DM_CREATE_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select * from  hr.PRODUCT_TOPPINGS_DIM where Flag = \\'Y\\'',",
						"     format: 'query') ~> source2",
						"source1 select(mapColumn(",
						"          src_PRODUCT_TOPPING_ID = PRODUCT_TOPPING_ID,",
						"          src_TOPPING_NAME = TOPPING_NAME,",
						"          src_TOPING_PRICE = TOPING_PRICE,",
						"          src_IS_ACTIVE = IS_ACTIVE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, source2 lookup(src_PRODUCT_TOPPING_ID == Product_Topping_ID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 derive(src_md5 = md5(concat(toString(replace(src_TOPING_PRICE, '$', '')), src_TOPPING_NAME)),",
						"          tgt_md5 = md5(concat(toString(Topping_Price), Topping_Name)),",
						"          o_DM_create_Date = currentDate(),",
						"          o_Effective_date = currentDate(),",
						"          o_End_Date = currentDate(),",
						"          Active_Flag = 'Y',",
						"          InActive_Flag = 'N',",
						"          src_TOPING_PRICE = toString(replace(src_TOPING_PRICE, '$', ''))) ~> derivedColumn1",
						"derivedColumn1 filter(isNull(Product_Topping_ID) || src_md5 != tgt_md5) ~> filterInsert",
						"derivedColumn1 filter(!isNull(Product_Topping_ID) && src_md5 != tgt_md5) ~> filterupdate",
						"filterupdate alterRow(updateIf(1==1)) ~> alterRow1",
						"filterInsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Product_Topping_Dim_Key as integer,",
						"          Product_Topping_ID as integer,",
						"          Topping_Name as string,",
						"          Topping_Price as decimal(5,2),",
						"          Is_Active as string,",
						"          Effective_Date as date,",
						"          END_DATE as date,",
						"          Flag as string,",
						"          DM_CREATE_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Product_Topping_ID = src_PRODUCT_TOPPING_ID,",
						"          Topping_Name = src_TOPPING_NAME,",
						"          Topping_Price = src_TOPING_PRICE,",
						"          Is_Active = src_IS_ACTIVE,",
						"          Effective_Date = o_Effective_date,",
						"          Flag = Active_Flag,",
						"          DM_CREATE_DATE = o_DM_create_Date",
						"     )) ~> sink1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Product_Topping_Dim_Key as integer,",
						"          Product_Topping_ID as integer,",
						"          Topping_Name as string,",
						"          Topping_Price as decimal(5,2),",
						"          Is_Active as string,",
						"          Effective_Date as date,",
						"          END_DATE as date,",
						"          Flag as string,",
						"          DM_CREATE_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['Product_Topping_Dim_Key'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Product_Topping_Dim_Key,",
						"          END_DATE = o_End_Date,",
						"          Flag = InActive_Flag",
						"     )) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dt_STG_PRODUCT_TOPPINGS_csv')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_PRODUCT_TOPPINGS_dim')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_PROMOTION_DIM_QUERY_SCD3')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "pizzaproject"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_Hr_Stg_Promotion",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTablePromotion_dim",
								"type": "DatasetReference"
							},
							"name": "sinkINSERT"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTablePromotion_dim",
								"type": "DatasetReference"
							},
							"name": "sinkUPDATE"
						}
					],
					"transformations": [
						{
							"name": "filterINSERT"
						},
						{
							"name": "derivedColumnINSERT"
						},
						{
							"name": "filterUPDATE"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SRC_PROMOTION_ID as integer,",
						"          SRC_PROMOTION_NAME as string,",
						"          SRC_PROMOTION_TYPE as string,",
						"          SRC_DISCOUNT_AMOUNT as decimal(5,2),",
						"          SRC_START_DATE as date,",
						"          SRC_END_DATE as date,",
						"          TGT_PROMOTION_DIM_KEY as integer,",
						"          TGT_PROMOTION_ID as integer,",
						"          TGT_PROMOTION_NAME as string,",
						"          TGT_PREVIOUS_PROMOTION_NAME as string,",
						"          TGT_PROMOTION_TYPE as string,",
						"          TGT_PREVIOUS_PROMOTION_TYPE as string,",
						"          TGT_DISCOUNT_AMOUNT as decimal(5,2),",
						"          TGT_PREVIOUS_DISCOUNT_AMOUNT as decimal(5,2),",
						"          TGT_START_DATE as date,",
						"          TGT_PREVIOUS_START_DATE as date,",
						"          TGT_END_DATE as date,",
						"          TGT_PREVIOUS_END_DATE as date,",
						"          TGT_CREATE_USER_DATE as date,",
						"          FLAG_UPDATE as string,",
						"          FLAG_INSERT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT                  \\r\\nP1.PROMOTION_ID     AS SRC_PROMOTION_ID ,\\r\\nP1.PROMOTION_NAME     AS SRC_PROMOTION_NAME,\\r\\nP1.PROMOTION_TYPE     AS SRC_PROMOTION_TYPE,\\r\\nP1.DISCOUNT_AMOUNT     AS SRC_DISCOUNT_AMOUNT,\\r\\nP1.START_DATE     AS SRC_START_DATE,\\r\\nP1.END_DATE    AS SRC_END_DATE,\\r\\nP2.PROMOTION_DIM_KEY AS TGT_PROMOTION_DIM_KEY ,     \\r\\nP2.PROMOTION_ID     AS TGT_PROMOTION_ID ,\\r\\nP2.PROMOTION_NAME     AS TGT_PROMOTION_NAME,\\r\\niif(P1.PROMOTION_NAME != P2.PROMOTION_NAME,P2.PROMOTION_NAME, null)   AS TGT_PREVIOUS_PROMOTION_NAME,\\r\\nP2.PROMOTION_TYPE AS TGT_PROMOTION_TYPE,\\r\\niif(P1.PROMOTION_TYPE != P2.PROMOTION_TYPE,P2.PROMOTION_TYPE, null)   AS TGT_PREVIOUS_PROMOTION_TYPE,\\r\\nP2.DISCOUNT_AMOUNT AS TGT_DISCOUNT_AMOUNT,\\r\\niif(P1.DISCOUNT_AMOUNT != P2.DISCOUNT_AMOUNT,P2.DISCOUNT_AMOUNT, 0)   AS TGT_PREVIOUS_DISCOUNT_AMOUNT,\\r\\nP2.START_DATE     AS TGT_START_DATE     ,\\r\\niif(P1.START_DATE != P2.START_DATE,P2.START_DATE, null)   AS TGT_PREVIOUS_START_DATE,\\r\\nP2.END_DATE     AS TGT_END_DATE ,\\r\\niif(P1.END_DATE != P2.END_DATE,P2.END_DATE, null)  AS TGT_PREVIOUS_END_DATE,\\r\\nP2.STG_CREATE_DATE AS TGT_CREATE_USER_DATE,\\r\\nCASE WHEN P2.PROMOTION_ID IS NOT NULL AND (P1.PROMOTION_NAME != P2.PROMOTION_NAME OR  P1.PROMOTION_TYPE != P2.PROMOTION_TYPE \\r\\nOR P1.DISCOUNT_AMOUNT != P2.DISCOUNT_AMOUNT\\r\\n)THEN \\'U\\' ELSE \\'N\\' END FLAG_UPDATE,\\r\\nCASE WHEN P2.PROMOTION_ID IS NULL THEN \\'I\\' ELSE \\'N\\' END FLAG_INSERT\\r\\nFROM HR.STG_PROMOTION P1\\r\\nLEFT JOIN HR.PROMOTION_DIM P2\\r\\nON P1.PROMOTION_ID = P2.PROMOTION_ID',",
						"     format: 'query') ~> source1",
						"source1 filter(FLAG_INSERT == 'I') ~> filterINSERT",
						"filterINSERT derive(o_CREATE_DATE = currentDate()) ~> derivedColumnINSERT",
						"source1 filter(FLAG_UPDATE == 'U') ~> filterUPDATE",
						"filterUPDATE alterRow(updateIf(1==1)) ~> alterRow1",
						"derivedColumnINSERT sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          PROMOTION_DIM_KEY as integer,",
						"          PROMOTION_ID as integer,",
						"          PROMOTION_NAME as string,",
						"          PREVIOUS_PROMOTION_NAME as string,",
						"          PROMOTION_TYPE as string,",
						"          PREVIOUS_PROMOTION_TYPE as string,",
						"          DISCOUNT_AMOUNT as decimal(5,2),",
						"          PREVIOUS_DISCOUNT_AMOUNT as decimal(5,2),",
						"          START_DATE as date,",
						"          PREVIOUS_START_DATE as date,",
						"          END_DATE as date,",
						"          PREVIOUS_END_DATE as date,",
						"          STG_CREATE_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          PROMOTION_ID = SRC_PROMOTION_ID,",
						"          PROMOTION_NAME = SRC_PROMOTION_NAME,",
						"          PROMOTION_TYPE = SRC_PROMOTION_TYPE,",
						"          DISCOUNT_AMOUNT = SRC_DISCOUNT_AMOUNT,",
						"          START_DATE = SRC_START_DATE,",
						"          END_DATE = SRC_END_DATE,",
						"          STG_CREATE_DATE = o_CREATE_DATE",
						"     )) ~> sinkINSERT",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          PROMOTION_DIM_KEY as integer,",
						"          PROMOTION_ID as integer,",
						"          PROMOTION_NAME as string,",
						"          PREVIOUS_PROMOTION_NAME as string,",
						"          PROMOTION_TYPE as string,",
						"          PREVIOUS_PROMOTION_TYPE as string,",
						"          DISCOUNT_AMOUNT as decimal(5,2),",
						"          PREVIOUS_DISCOUNT_AMOUNT as decimal(5,2),",
						"          START_DATE as date,",
						"          PREVIOUS_START_DATE as date,",
						"          END_DATE as date,",
						"          PREVIOUS_END_DATE as date,",
						"          STG_CREATE_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['PROMOTION_DIM_KEY'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          PROMOTION_DIM_KEY = TGT_PROMOTION_DIM_KEY,",
						"          PROMOTION_ID = SRC_PROMOTION_ID,",
						"          PROMOTION_NAME = SRC_PROMOTION_NAME,",
						"          PREVIOUS_PROMOTION_NAME = TGT_PROMOTION_NAME,",
						"          PROMOTION_TYPE = SRC_PROMOTION_TYPE,",
						"          PREVIOUS_PROMOTION_TYPE = TGT_PROMOTION_TYPE,",
						"          DISCOUNT_AMOUNT = SRC_DISCOUNT_AMOUNT,",
						"          PREVIOUS_DISCOUNT_AMOUNT = TGT_DISCOUNT_AMOUNT,",
						"          START_DATE = SRC_START_DATE,",
						"          PREVIOUS_START_DATE = TGT_START_DATE,",
						"          END_DATE = SRC_END_DATE,",
						"          PREVIOUS_END_DATE = TGT_END_DATE,",
						"          STG_CREATE_DATE = TGT_CREATE_USER_DATE",
						"     )) ~> sinkUPDATE"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_Hr_Stg_Promotion')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTablePromotion_dim')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_PROMOTION_DIM_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "we can do this in single pipeline ",
				"folder": {
					"name": "pizzaproject"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_stg_PROMOTION",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTablePromotion_dim",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTablePromotion_dim",
								"type": "DatasetReference"
							},
							"name": "sinkInsert"
						}
					],
					"transformations": [
						{
							"name": "lookup1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PROMOTION_ID as short,",
						"          PROMOTION_NAME as string,",
						"          PROMOTION_TYPE as string,",
						"          DISCOUNT_AMOUNT as string,",
						"          START_DATE as string,",
						"          END_DATE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          PROMOTION_DIM_KEY as integer,",
						"          PROMOTION_ID as integer,",
						"          PROMOTION_NAME as string,",
						"          PREVIOUS_PROMOTION_NAME as string,",
						"          PROMOTION_TYPE as string,",
						"          PREVIOUS_PROMOTION_TYPE as string,",
						"          DISCOUNT_AMOUNT as decimal(5,2),",
						"          PREVIOUS_DISCOUNT_AMOUNT as decimal(5,2),",
						"          START_DATE as date,",
						"          PREVIOUS_START_DATE as date,",
						"          END_DATE as date,",
						"          PREVIOUS_END_DATE as date,",
						"          STG_CREATE_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source2",
						"derivedColumn3, source2 lookup(source1@PROMOTION_ID == source2@PROMOTION_ID,",
						"     multiple: true,",
						"     broadcast: 'auto',",
						"     pickup: 'any')~> lookup1",
						"lookup1 derive(o_create_date = currentDate(),",
						"          o_promotion_name = iif(source1@PROMOTION_NAME != source2@PROMOTION_NAME,source2@PROMOTION_NAME,toString(null())),",
						"          o_PROMOTION_TYPE = iif(source1@PROMOTION_TYPE !=source2@PROMOTION_TYPE,source2@PROMOTION_TYPE,toString(null())),",
						"          o_PREVIOUS_START_DATE = iif(src_start_date != source2@START_DATE, source2@START_DATE, toDate(null())),",
						"          o_PREVIOUS_END_DATE = iif(src_end_date != source2@END_DATE, source2@END_DATE, toDate(null())),",
						"          o_PREVIOUS_DISCOUNT_AMOUNT = iif(src_discount_amount != source2@DISCOUNT_AMOUNT,source2@DISCOUNT_AMOUNT,toDecimal(0))) ~> derivedColumn1",
						"derivedColumn1 alterRow(insertIf(isNull(source2@PROMOTION_ID)),",
						"     updateIf(!isNull(source2@PROMOTION_ID))) ~> alterRow1",
						"source1 derive(src_discount_amount = toDecimal(replace(DISCOUNT_AMOUNT,'%',''), 5, 2),",
						"          src_start_date = toDate(START_DATE,'MM/dd/yyyy'),",
						"          src_end_date = toDate(END_DATE,'MM/dd/yyyy')) ~> derivedColumn3",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          PROMOTION_DIM_KEY as integer,",
						"          PROMOTION_ID as integer,",
						"          PROMOTION_NAME as string,",
						"          PREVIOUS_PROMOTION_NAME as string,",
						"          PROMOTION_TYPE as string,",
						"          PREVIOUS_PROMOTION_TYPE as string,",
						"          DISCOUNT_AMOUNT as decimal(5,2),",
						"          PREVIOUS_DISCOUNT_AMOUNT as decimal(5,2),",
						"          START_DATE as date,",
						"          PREVIOUS_START_DATE as date,",
						"          END_DATE as date,",
						"          PREVIOUS_END_DATE as date,",
						"          STG_CREATE_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['PROMOTION_ID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          PROMOTION_ID = source1@PROMOTION_ID,",
						"          PROMOTION_NAME = source1@PROMOTION_NAME,",
						"          PREVIOUS_PROMOTION_NAME = o_promotion_name,",
						"          PROMOTION_TYPE = source1@PROMOTION_TYPE,",
						"          PREVIOUS_PROMOTION_TYPE = o_PROMOTION_TYPE,",
						"          DISCOUNT_AMOUNT = src_discount_amount,",
						"          PREVIOUS_DISCOUNT_AMOUNT = o_PREVIOUS_DISCOUNT_AMOUNT,",
						"          START_DATE = src_start_date,",
						"          PREVIOUS_START_DATE = o_PREVIOUS_START_DATE,",
						"          END_DATE = src_end_date,",
						"          PREVIOUS_END_DATE = o_PREVIOUS_END_DATE,",
						"          STG_CREATE_DATE = o_create_date",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> sinkInsert"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_stg_PROMOTION')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTablePromotion_dim')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_PROMOTION_DIM_scd3')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "pizzaproject"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_stg_PROMOTION",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTablePromotion_dim",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTablePromotion_dim",
								"type": "DatasetReference"
							},
							"name": "sinkInsert"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTablePromotion_dim",
								"type": "DatasetReference"
							},
							"name": "sinkUpdate"
						}
					],
					"transformations": [
						{
							"name": "lookup1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "filterInsert"
						},
						{
							"name": "filterUpdate"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "alterRow2"
						},
						{
							"name": "derivedColumn3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PROMOTION_ID as short,",
						"          PROMOTION_NAME as string,",
						"          PROMOTION_TYPE as string,",
						"          DISCOUNT_AMOUNT as string,",
						"          START_DATE as string,",
						"          END_DATE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          PROMOTION_DIM_KEY as integer,",
						"          PROMOTION_ID as integer,",
						"          PROMOTION_NAME as string,",
						"          PREVIOUS_PROMOTION_NAME as string,",
						"          PROMOTION_TYPE as string,",
						"          PREVIOUS_PROMOTION_TYPE as string,",
						"          DISCOUNT_AMOUNT as decimal(5,2),",
						"          PREVIOUS_DISCOUNT_AMOUNT as decimal(5,2),",
						"          START_DATE as date,",
						"          PREVIOUS_START_DATE as date,",
						"          END_DATE as date,",
						"          PREVIOUS_END_DATE as date,",
						"          STG_CREATE_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source2",
						"derivedColumn3, derivedColumn2 lookup(source1@PROMOTION_ID == source2@PROMOTION_ID,",
						"     multiple: true,",
						"     broadcast: 'auto',",
						"     pickup: 'any')~> lookup1",
						"lookup1 derive(o_create_date = currentDate(),",
						"          flag_I_U = iif(isNull(source2@PROMOTION_ID),'I',iif(src_md5 != md5,'U','NC')),",
						"          o_promotion_name = iif(source1@PROMOTION_NAME != source2@PROMOTION_NAME,source2@PROMOTION_NAME,toString(null())),",
						"          o_PROMOTION_TYPE = iif(source1@PROMOTION_TYPE !=source2@PROMOTION_TYPE,source2@PROMOTION_TYPE,toString(null())),",
						"          o_PREVIOUS_START_DATE = iif(src_start_date != source2@START_DATE, source2@START_DATE, toDate(null())),",
						"          o_PREVIOUS_END_DATE = iif(src_end_date != source2@END_DATE, source2@END_DATE, toDate(null())),",
						"          o_PREVIOUS_DISCOUNT_AMOUNT = iif(src_discount_amount != source2@DISCOUNT_AMOUNT,source2@DISCOUNT_AMOUNT,toDecimal(0))) ~> derivedColumn1",
						"source2 derive(md5 = md5(concat(PROMOTION_NAME,PROMOTION_TYPE,toString(DISCOUNT_AMOUNT),toString(START_DATE),toString(END_DATE)))) ~> derivedColumn2",
						"derivedColumn1 filter(flag_I_U == 'I') ~> filterInsert",
						"derivedColumn1 filter(flag_I_U == 'U') ~> filterUpdate",
						"filterInsert alterRow(insertIf(flag_I_U=='I')) ~> alterRow1",
						"filterUpdate alterRow(updateIf(flag_I_U=='U')) ~> alterRow2",
						"source1 derive(src_md5 = md5(concat(PROMOTION_NAME,PROMOTION_TYPE),toString(toDecimal(DISCOUNT_AMOUNT,2)),toString(toDate(START_DATE, 'dd/mm/yyyy')),toString(toDate(END_DATE, 'dd/mm/yyyy'))),",
						"          src_discount_amount = toDecimal(replace(DISCOUNT_AMOUNT,'%',''), 5, 2),",
						"          src_start_date = toDate(START_DATE,'MM/dd/yyyy'),",
						"          src_end_date = toDate(END_DATE,'MM/dd/yyyy')) ~> derivedColumn3",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          PROMOTION_DIM_KEY as integer,",
						"          PROMOTION_ID as integer,",
						"          PROMOTION_NAME as string,",
						"          PREVIOUS_PROMOTION_NAME as string,",
						"          PROMOTION_TYPE as string,",
						"          PREVIOUS_PROMOTION_TYPE as string,",
						"          DISCOUNT_AMOUNT as decimal(5,2),",
						"          PREVIOUS_DISCOUNT_AMOUNT as decimal(5,2),",
						"          START_DATE as date,",
						"          PREVIOUS_START_DATE as date,",
						"          END_DATE as date,",
						"          PREVIOUS_END_DATE as date,",
						"          STG_CREATE_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          PROMOTION_ID = source1@PROMOTION_ID,",
						"          PROMOTION_NAME = source1@PROMOTION_NAME,",
						"          PROMOTION_TYPE = source1@PROMOTION_TYPE,",
						"          DISCOUNT_AMOUNT = src_discount_amount,",
						"          START_DATE = src_start_date,",
						"          END_DATE = src_end_date,",
						"          STG_CREATE_DATE = o_create_date",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> sinkInsert",
						"alterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          PROMOTION_DIM_KEY as integer,",
						"          PROMOTION_ID as integer,",
						"          PROMOTION_NAME as string,",
						"          PREVIOUS_PROMOTION_NAME as string,",
						"          PROMOTION_TYPE as string,",
						"          PREVIOUS_PROMOTION_TYPE as string,",
						"          DISCOUNT_AMOUNT as decimal(5,2),",
						"          PREVIOUS_DISCOUNT_AMOUNT as decimal(5,2),",
						"          START_DATE as date,",
						"          PREVIOUS_START_DATE as date,",
						"          END_DATE as date,",
						"          PREVIOUS_END_DATE as date,",
						"          STG_CREATE_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['PROMOTION_ID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          PROMOTION_ID = source1@PROMOTION_ID,",
						"          PROMOTION_NAME = source1@PROMOTION_NAME,",
						"          PREVIOUS_PROMOTION_NAME = o_promotion_name,",
						"          PROMOTION_TYPE = source1@PROMOTION_TYPE,",
						"          PREVIOUS_PROMOTION_TYPE = o_PROMOTION_TYPE,",
						"          DISCOUNT_AMOUNT = src_discount_amount,",
						"          PREVIOUS_DISCOUNT_AMOUNT = o_PREVIOUS_DISCOUNT_AMOUNT,",
						"          START_DATE = src_start_date,",
						"          PREVIOUS_START_DATE = o_PREVIOUS_START_DATE,",
						"          END_DATE = src_end_date,",
						"          PREVIOUS_END_DATE = o_PREVIOUS_END_DATE,",
						"          STG_CREATE_DATE",
						"     )) ~> sinkUpdate"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_stg_PROMOTION')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTablePromotion_dim')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Product_Dim')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "pizzaproject"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableProduct",
								"type": "DatasetReference"
							},
							"name": "sourceHrProduct"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableSourceHrProductDim",
								"type": "DatasetReference"
							},
							"name": "sourceHrProductDim"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableSourceHrProductDim",
								"type": "DatasetReference"
							},
							"name": "Insertsink1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableSourceHrProductDim",
								"type": "DatasetReference"
							},
							"name": "sinkUpdate"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "filterInsert"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "select1"
						},
						{
							"name": "filterUpdate"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "select2"
						},
						{
							"name": "alterRow2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PRODUCT_DIM_KEY as long,",
						"          PRODUCT_ID as short,",
						"          PRODUCT_NAME as string,",
						"          PRODUCT_PRICE as string,",
						"          PRODUCT_DESCRIPTION as string,",
						"          IS_ACTIVE as string,",
						"          PRODUCT_SUBCATEGORY_ID as short,",
						"          PRODUCT_SUBCATEGORY_NAME as string,",
						"          PRODUCT_SIZE as string,",
						"          PRODUCT_CATEGORY_ID as short,",
						"          PRODUCT_CATEGORY_NAME as string,",
						"          CREATE_USER_DATE as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceHrProduct",
						"source(output(",
						"          Surr_Product_kEY as integer,",
						"          Product_ID as integer,",
						"          Product_Name as string,",
						"          Product_Price as decimal(5,2),",
						"          Is_Active as string,",
						"          PRODUCT_CATEGORY_ID as string,",
						"          Product_Category_Name as string,",
						"          Product_SubCategory_ID as integer,",
						"          Product_SubCategory_Name as string,",
						"          Product_Size as string,",
						"          Product_Description as string,",
						"          Eff_Start_Date as date,",
						"          Eff_End_Date as date,",
						"          DM_CREATE_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select * from hr.Product_Dim where Eff_End_Date IS NULL',",
						"     format: 'query') ~> sourceHrProductDim",
						"sourceHrProduct filter(IS_ACTIVE == 'Active') ~> filter1",
						"filter1 derive(src_md5 = md5(concat(PRODUCT_NAME,PRODUCT_PRICE,PRODUCT_DESCRIPTION,toString(PRODUCT_SUBCATEGORY_ID),PRODUCT_SUBCATEGORY_NAME,PRODUCT_SIZE,PRODUCT_CATEGORY_NAME,toString(PRODUCT_CATEGORY_ID)))) ~> derivedColumn1",
						"sourceHrProductDim derive(tgt_MD5 = md5(\r",
						"  concat(\r",
						"    Product_Name,toString(Product_Price),Product_Description,\r",
						"    toString(Product_SubCategory_ID),Product_SubCategory_Name,\r",
						"    Product_Size,Product_Category_Name,\r",
						"    toString(PRODUCT_CATEGORY_ID)\r",
						"  )\r",
						")) ~> derivedColumn2",
						"derivedColumn1, derivedColumn2 lookup(sourceHrProduct@PRODUCT_ID == sourceHrProductDim@Product_ID,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 filter(isNull(Surr_Product_kEY) || src_md5 != tgt_MD5) ~> filterInsert",
						"filterInsert derive(o_Date = currentDate(),",
						"          dm_Date = currentDate()) ~> derivedColumn3",
						"derivedColumn3 select(mapColumn(",
						"          PRODUCT_ID = sourceHrProduct@PRODUCT_ID,",
						"          PRODUCT_NAME = sourceHrProduct@PRODUCT_NAME,",
						"          PRODUCT_PRICE = sourceHrProduct@PRODUCT_PRICE,",
						"          PRODUCT_DESCRIPTION = sourceHrProduct@PRODUCT_DESCRIPTION,",
						"          IS_ACTIVE = sourceHrProduct@IS_ACTIVE,",
						"          PRODUCT_SUBCATEGORY_ID = sourceHrProduct@PRODUCT_SUBCATEGORY_ID,",
						"          PRODUCT_SUBCATEGORY_NAME = sourceHrProduct@PRODUCT_SUBCATEGORY_NAME,",
						"          PRODUCT_SIZE = sourceHrProduct@PRODUCT_SIZE,",
						"          PRODUCT_CATEGORY_ID = sourceHrProduct@PRODUCT_CATEGORY_ID,",
						"          PRODUCT_CATEGORY_NAME = sourceHrProduct@PRODUCT_CATEGORY_NAME,",
						"          o_Date,",
						"          dm_Date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"lookup1 filter(src_md5 != tgt_MD5) ~> filterUpdate",
						"filterUpdate derive(o_Date = currentDate()) ~> derivedColumn4",
						"derivedColumn4 select(mapColumn(",
						"          Surr_Product_kEY,",
						"          o_Date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 alterRow(updateIf(1==1)) ~> alterRow2",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Surr_Product_kEY as integer,",
						"          Product_ID as integer,",
						"          Product_Name as string,",
						"          Product_Price as decimal(5,2),",
						"          Is_Active as string,",
						"          PRODUCT_CATEGORY_ID as string,",
						"          Product_Category_Name as string,",
						"          Product_SubCategory_ID as integer,",
						"          Product_SubCategory_Name as string,",
						"          Product_Size as string,",
						"          Product_Description as string,",
						"          Eff_Start_Date as date,",
						"          Eff_End_Date as date,",
						"          DM_CREATE_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Product_ID = PRODUCT_ID,",
						"          Product_Name = PRODUCT_NAME,",
						"          Product_Price = PRODUCT_PRICE,",
						"          Is_Active = IS_ACTIVE,",
						"          PRODUCT_CATEGORY_ID,",
						"          Product_Category_Name = PRODUCT_CATEGORY_NAME,",
						"          Product_SubCategory_ID = PRODUCT_SUBCATEGORY_ID,",
						"          Product_SubCategory_Name = PRODUCT_SUBCATEGORY_NAME,",
						"          Product_Size = PRODUCT_SIZE,",
						"          Product_Description = PRODUCT_DESCRIPTION,",
						"          Eff_Start_Date = o_Date,",
						"          DM_CREATE_DATE = dm_Date",
						"     )) ~> Insertsink1",
						"alterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Surr_Product_kEY as integer,",
						"          Product_ID as integer,",
						"          Product_Name as string,",
						"          Product_Price as decimal(5,2),",
						"          Is_Active as string,",
						"          PRODUCT_CATEGORY_ID as string,",
						"          Product_Category_Name as string,",
						"          Product_SubCategory_ID as integer,",
						"          Product_SubCategory_Name as string,",
						"          Product_Size as string,",
						"          Product_Description as string,",
						"          Eff_Start_Date as date,",
						"          Eff_End_Date as date,",
						"          DM_CREATE_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['Surr_Product_kEY'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Surr_Product_kEY,",
						"          Eff_End_Date = o_Date,",
						"          DM_CREATE_DATE = o_Date",
						"     )) ~> sinkUpdate"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableProduct')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableSourceHrProductDim')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Product_Dim_copy')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "pizzaproject"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableProduct",
								"type": "DatasetReference"
							},
							"name": "sourceHrProductCopy"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableHRProductDimCopy",
								"type": "DatasetReference"
							},
							"name": "sourceHrProductDimCopy"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableHRProductDimCopy",
								"type": "DatasetReference"
							},
							"name": "Insertsink1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableHRProductDimCopy",
								"type": "DatasetReference"
							},
							"name": "sinkUpdate"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "filterInsert"
						},
						{
							"name": "select1"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "filterUpdate"
						},
						{
							"name": "select2"
						},
						{
							"name": "alterRow2"
						},
						{
							"name": "derivedColumn5"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PRODUCT_DIM_KEY as long,",
						"          PRODUCT_ID as short,",
						"          PRODUCT_NAME as string,",
						"          PRODUCT_PRICE as string,",
						"          PRODUCT_DESCRIPTION as string,",
						"          IS_ACTIVE as string,",
						"          PRODUCT_SUBCATEGORY_ID as short,",
						"          PRODUCT_SUBCATEGORY_NAME as string,",
						"          PRODUCT_SIZE as string,",
						"          PRODUCT_CATEGORY_ID as short,",
						"          PRODUCT_CATEGORY_NAME as string,",
						"          CREATE_USER_DATE as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceHrProductCopy",
						"source(output(",
						"          Surr_Product_kEY as integer,",
						"          Product_ID as integer,",
						"          Product_Name as string,",
						"          Product_Price as decimal(5,2),",
						"          Is_Active as string,",
						"          PRODUCT_CATEGORY_ID as string,",
						"          Product_Category_Name as string,",
						"          Product_SubCategory_ID as integer,",
						"          Product_SubCategory_Name as string,",
						"          Product_Size as string,",
						"          Product_Description as string,",
						"          Eff_Start_Date as date,",
						"          Eff_End_Date as date,",
						"          DM_CREATE_DATE as date,",
						"          Flag as integer,",
						"          MD5_Checksum as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select * from hr.Product_Dim_copy where Flag =1',",
						"     format: 'query') ~> sourceHrProductDimCopy",
						"sourceHrProductCopy filter(IS_ACTIVE == 'Active') ~> filter1",
						"filter1 derive(src_md5 = md5(concat(PRODUCT_NAME,PRODUCT_PRICE,PRODUCT_DESCRIPTION,toString(PRODUCT_SUBCATEGORY_ID),PRODUCT_SUBCATEGORY_NAME,PRODUCT_SIZE,PRODUCT_CATEGORY_NAME,toString(PRODUCT_CATEGORY_ID)))) ~> derivedColumn1",
						"derivedColumn1, sourceHrProductDimCopy lookup(sourceHrProductCopy@PRODUCT_ID == sourceHrProductDimCopy@Product_ID,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookup1",
						"derivedColumn5 filter(Flag_I_U == 'insert' || Flag_I_U == 'update') ~> filterInsert",
						"filterInsert select(mapColumn(",
						"          PRODUCT_ID = sourceHrProductCopy@PRODUCT_ID,",
						"          PRODUCT_NAME = sourceHrProductCopy@PRODUCT_NAME,",
						"          PRODUCT_PRICE = sourceHrProductCopy@PRODUCT_PRICE,",
						"          PRODUCT_DESCRIPTION = sourceHrProductCopy@PRODUCT_DESCRIPTION,",
						"          IS_ACTIVE = sourceHrProductCopy@IS_ACTIVE,",
						"          PRODUCT_SUBCATEGORY_ID = sourceHrProductCopy@PRODUCT_SUBCATEGORY_ID,",
						"          PRODUCT_SUBCATEGORY_NAME = sourceHrProductCopy@PRODUCT_SUBCATEGORY_NAME,",
						"          PRODUCT_SIZE = sourceHrProductCopy@PRODUCT_SIZE,",
						"          PRODUCT_CATEGORY_ID = sourceHrProductCopy@PRODUCT_CATEGORY_ID,",
						"          PRODUCT_CATEGORY_NAME = sourceHrProductCopy@PRODUCT_CATEGORY_NAME,",
						"          src_md5,",
						"          Flag_I_U,",
						"          ActiveFlag,",
						"          o_EFF_Date,",
						"          o_End_Date,",
						"          o_DM_User_Date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 alterRow(insertIf(Flag_I_U=='insert'||Flag_I_U=='update')) ~> alterRow1",
						"derivedColumn5 filter(Flag_I_U == 'update') ~> filterUpdate",
						"filterUpdate select(mapColumn(",
						"          Surr_Product_kEY,",
						"          Flag_I_U,",
						"          InActiveFlag,",
						"          o_EFF_Date,",
						"          o_DM_User_Date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 alterRow(updateIf(Flag_I_U=='update')) ~> alterRow2",
						"lookup1 derive(o_DM_User_Date = currentUTC(),",
						"          Flag_I_U = iif(isNull(Surr_Product_kEY), 'insert', iif(src_md5 != MD5_Checksum, 'update','nc')),",
						"          ActiveFlag = 1,",
						"          InActiveFlag = 0,",
						"          o_EFF_Date = currentUTC(),",
						"          o_End_Date = toDate('12/31/9999', 'MM/dd/yyyy', 'en-US')) ~> derivedColumn5",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Surr_Product_kEY as integer,",
						"          Product_ID as integer,",
						"          Product_Name as string,",
						"          Product_Price as decimal(5,2),",
						"          Is_Active as string,",
						"          PRODUCT_CATEGORY_ID as string,",
						"          Product_Category_Name as string,",
						"          Product_SubCategory_ID as integer,",
						"          Product_SubCategory_Name as string,",
						"          Product_Size as string,",
						"          Product_Description as string,",
						"          Eff_Start_Date as date,",
						"          Eff_End_Date as date,",
						"          DM_CREATE_DATE as date,",
						"          Flag as integer,",
						"          MD5_Checksum as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Product_ID = PRODUCT_ID,",
						"          Product_Name = PRODUCT_NAME,",
						"          Product_Price = PRODUCT_PRICE,",
						"          Is_Active = IS_ACTIVE,",
						"          PRODUCT_CATEGORY_ID,",
						"          Product_Category_Name = PRODUCT_CATEGORY_NAME,",
						"          Product_SubCategory_ID = PRODUCT_SUBCATEGORY_ID,",
						"          Product_SubCategory_Name = PRODUCT_SUBCATEGORY_NAME,",
						"          Product_Size = PRODUCT_SIZE,",
						"          Product_Description = PRODUCT_DESCRIPTION,",
						"          Eff_Start_Date = o_EFF_Date,",
						"          Eff_End_Date = o_End_Date,",
						"          DM_CREATE_DATE = o_DM_User_Date,",
						"          Flag = ActiveFlag,",
						"          MD5_Checksum = src_md5",
						"     )) ~> Insertsink1",
						"alterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Surr_Product_kEY as integer,",
						"          Product_ID as integer,",
						"          Product_Name as string,",
						"          Product_Price as decimal(5,2),",
						"          Is_Active as string,",
						"          PRODUCT_CATEGORY_ID as string,",
						"          Product_Category_Name as string,",
						"          Product_SubCategory_ID as integer,",
						"          Product_SubCategory_Name as string,",
						"          Product_Size as string,",
						"          Product_Description as string,",
						"          Eff_Start_Date as date,",
						"          Eff_End_Date as date,",
						"          DM_CREATE_DATE as date,",
						"          Flag as integer,",
						"          MD5_Checksum as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['Surr_Product_kEY'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Surr_Product_kEY,",
						"          Eff_End_Date = o_EFF_Date,",
						"          DM_CREATE_DATE = o_DM_User_Date,",
						"          Flag = InActiveFlag",
						"     )) ~> sinkUpdate"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableProduct')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableHRProductDimCopy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Sales_Fact_Query')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "pizzaproject"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "df_PizzaProject_Customer_DIM",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableSalesFact",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          order_line_id as integer,",
						"          order_id as integer,",
						"          customer_dim_key as long,",
						"          payment_ref_key as integer,",
						"          channel_ref_key as integer,",
						"          delivery_type_ref_key as integer,",
						"          product_topping_dim_key as integer,",
						"          loc_dim_key as integer,",
						"          Surr_Product_key as integer,",
						"          promotion_dim_key as integer,",
						"          date_key as string,",
						"          order_date as date,",
						"          order_status as string,",
						"          quantity as integer,",
						"          unit_price as decimal(10,2),",
						"          topping_price as decimal(5,2),",
						"          promotion_amount as decimal(10,2)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT\\r\\n    orl.order_line_id as order_line_id,\\r\\n    ord.order_id as order_id,\\r\\n    cust.customer_dim_key as customer_dim_key,\\r\\n    pmr.payment_ref_key as payment_ref_key,\\r\\n    cna.channel_ref_key as channel_ref_key,\\r\\n    dlv.delivery_type_ref_key as delivery_type_ref_key,\\r\\n    ptd.product_topping_dim_key as product_topping_dim_key,\\r\\n    loc.loc_dim_key as loc_dim_key,\\r\\n    prd.Surr_Product_key as Surr_Product_key,\\r\\n    prm.promotion_dim_key as promotion_dim_key,\\r\\n    dt.date_key as date_key,\\r\\n    ord.order_date as order_date,\\r\\n    ord.order_status as order_status,\\r\\n    orl.quantity as quantity,\\r\\n    orl.unit_price as unit_price,\\r\\n    ptd.topping_price as topping_price,\\r\\n    orl.promotion_amount as promotion_amount\\r\\nFROM\\r\\n         hr.OrderLine orl\\r\\n    JOIN [hr].[Order]            ord ON orl.order_id = ord.order_id\\r\\n    JOIN hr.CUSTOMER_DIM      cust ON cust.customer_id = ord.customer_id\\r\\n    JOIN hr.payment_ref          pmr ON pmr.payment_id = ord.payment_id\\r\\n    JOIN hr.channel_ref          cna ON cna.channel_id = ord.channel_id\\r\\n    JOIN hr.delivery_type_ref    dlv ON ord.delivery_id = dlv.delivery_type_id\\r\\n    JOIN hr.product_toppings_dim   ptd ON orl.product_topping_id = ptd.product_topping_id\\r\\n    JOIN hr.LOCATION_DIM1         loc ON loc.store_location_id = ord.store_location_id\\r\\n    JOIN [hr].[Product_Dim]          prd ON prd.product_id = orl.product_id\\r\\n    JOIN hr.promotion_dim        prm ON prm.promotion_id = orl.promotion_id\\r\\n    JOIN hr.Date_data        dt ON ord.order_date = dt.day_yyyy_mm_dd',",
						"     format: 'query') ~> source1",
						"source1 derive(o_Create_User_Date = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          order_line_id as integer,",
						"          order_id as integer,",
						"          customer_dim_key as long,",
						"          payment_ref_key as integer,",
						"          channel_ref_key as integer,",
						"          delivery_type_ref_key as integer,",
						"          product_topping_dim_key as integer,",
						"          loc_dim_key as integer,",
						"          Surr_Product_key as integer,",
						"          promotion_dim_key as integer,",
						"          date_key as string,",
						"          order_date as date,",
						"          order_status as string,",
						"          quantity as integer,",
						"          unit_price as decimal(10,2),",
						"          topping_price as decimal(5,2),",
						"          promotion_amount as decimal(10,2),",
						"          DM_create_date as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          order_line_id,",
						"          order_id,",
						"          customer_dim_key,",
						"          payment_ref_key,",
						"          channel_ref_key,",
						"          delivery_type_ref_key,",
						"          product_topping_dim_key,",
						"          loc_dim_key,",
						"          Surr_Product_key,",
						"          promotion_dim_key,",
						"          date_key,",
						"          order_date,",
						"          order_status,",
						"          quantity,",
						"          unit_price,",
						"          topping_price,",
						"          promotion_amount,",
						"          DM_create_date = o_Create_User_Date",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/df_PizzaProject_Customer_DIM')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableSalesFact')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Sales_Fact_joinner')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "pizzaproject"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableOrderLine",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableOrder",
								"type": "DatasetReference"
							},
							"name": "source2"
						},
						{
							"dataset": {
								"referenceName": "df_PizzaProject_Customer_DIM",
								"type": "DatasetReference"
							},
							"name": "source3"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable_payment_ref",
								"type": "DatasetReference"
							},
							"name": "source4"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableDelivery_type",
								"type": "DatasetReference"
							},
							"name": "source5"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableHrChannelRef",
								"type": "DatasetReference"
							},
							"name": "source6"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable_PRODUCT_TOPPINGS_dim",
								"type": "DatasetReference"
							},
							"name": "source7"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableHRLOCATION_DIM1",
								"type": "DatasetReference"
							},
							"name": "source8"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableSourceHrProductDim",
								"type": "DatasetReference"
							},
							"name": "source9"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTablePromotion_dim",
								"type": "DatasetReference"
							},
							"name": "source10"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableDate",
								"type": "DatasetReference"
							},
							"name": "source11"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableSalesFact",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "join1"
						},
						{
							"name": "join2"
						},
						{
							"name": "join3"
						},
						{
							"name": "join4"
						},
						{
							"name": "join5"
						},
						{
							"name": "join6"
						},
						{
							"name": "join7"
						},
						{
							"name": "join8"
						},
						{
							"name": "join9"
						},
						{
							"name": "join10"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ORDER_LINE_ID as integer,",
						"          UNIT_PRICE as decimal(10,2),",
						"          QUANTITY as integer,",
						"          PROMOTION_AMOUNT as decimal(10,2),",
						"          PROMOTION_ID as integer,",
						"          ORDER_ID as integer,",
						"          PRODUCT_ID as integer,",
						"          PRODUCT_TOPPING_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source(output(",
						"          ORDER_ID as integer,",
						"          ORDER_DATE as date,",
						"          ORDER_STATUS as string,",
						"          TOTAL_AMOUNT as decimal(10,2),",
						"          TOTAL_TAX as decimal(10,2),",
						"          TIPS as decimal(10,2),",
						"          TOTAL_QUANTITY as integer,",
						"          DELIVERY_ID as integer,",
						"          CHANNEL_ID as integer,",
						"          STORE_LOCATION_ID as integer,",
						"          CUSTOMER_ID as integer,",
						"          PAYMENT_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source2",
						"source(output(",
						"          CUSTOMER_DIM_KEY as long,",
						"          CUSTOMER_ID as short,",
						"          CUSTOMER_FIRST_NAME as string,",
						"          CUSTOMER_LAST_NAME as string,",
						"          IS_LOYAL as boolean,",
						"          CUSTOMER_EMAIL as string,",
						"          Secondary_Email as string,",
						"          CUSTOMER_PHONE_NUMBER as string,",
						"          SecondaryNo as string,",
						"          Office_ADDRESS_LANE1 as string,",
						"          Office_ADDRESS_LANE_2 as string,",
						"          Office_CITY_NAME as string,",
						"          Office_STATE_NAME as string,",
						"          Office_COUNTRY_NAME as string,",
						"          Office_ZIP_CODE as integer,",
						"          Office_GATE_CODE as short,",
						"          Residential_ADDRESS_LANE1 as string,",
						"          Residential_ADDRESS_LANE_2 as string,",
						"          Residential_CITY_NAME as string,",
						"          Residential_STATE_NAME as string,",
						"          Residential_COUNTRY_NAME as string,",
						"          Residential_ZIP_CODE as integer,",
						"          Residential_GATE_CODE as short,",
						"          JOINING_DATE as string,",
						"          USER_CREATE_DATE as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source3",
						"source(output(",
						"          Payment_Ref_Key as integer,",
						"          Payment_ID as integer,",
						"          Payment_Type as string,",
						"          STG_CREATE_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source4",
						"source(output(",
						"          Delivery_Type_Ref_key as integer,",
						"          Delivery_Type_ID as integer,",
						"          Delivery_Type as string,",
						"          STG_CREATE_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source5",
						"source(output(",
						"          Channel_ref_key as integer,",
						"          Channel_ID as integer,",
						"          Channel_Type as string,",
						"          STG_CREATE_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source6",
						"source(output(",
						"          Product_Topping_Dim_Key as integer,",
						"          Product_Topping_ID as integer,",
						"          Topping_Name as string,",
						"          Topping_Price as decimal(5,2),",
						"          Is_Active as string,",
						"          Effective_Date as date,",
						"          END_DATE as date,",
						"          Flag as string,",
						"          DM_CREATE_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source7",
						"source(output(",
						"          Loc_Dim_Key as integer,",
						"          Store_Location_ID as integer,",
						"          Store_Name as string,",
						"          Store_Address as string,",
						"          Store_Open_Time as string,",
						"          Store_Close_Time as string,",
						"          State_Name as string,",
						"          FLAG as string,",
						"          DM_CREATE_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source8",
						"source(output(",
						"          Surr_Product_kEY as integer,",
						"          Product_ID as integer,",
						"          Product_Name as string,",
						"          Product_Price as decimal(5,2),",
						"          Is_Active as string,",
						"          PRODUCT_CATEGORY_ID as string,",
						"          Product_Category_Name as string,",
						"          Product_SubCategory_ID as integer,",
						"          Product_SubCategory_Name as string,",
						"          Product_Size as string,",
						"          Product_Description as string,",
						"          Eff_Start_Date as date,",
						"          Eff_End_Date as date,",
						"          DM_CREATE_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source9",
						"source(output(",
						"          PROMOTION_DIM_KEY as integer,",
						"          PROMOTION_ID as integer,",
						"          PROMOTION_NAME as string,",
						"          PREVIOUS_PROMOTION_NAME as string,",
						"          PROMOTION_TYPE as string,",
						"          PREVIOUS_PROMOTION_TYPE as string,",
						"          DISCOUNT_AMOUNT as decimal(5,2),",
						"          PREVIOUS_DISCOUNT_AMOUNT as decimal(5,2),",
						"          START_DATE as date,",
						"          PREVIOUS_START_DATE as date,",
						"          END_DATE as date,",
						"          PREVIOUS_END_DATE as date,",
						"          STG_CREATE_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source10",
						"source(output(",
						"          DATE_KEY as string,",
						"          DAY_YYYY_MM_DD as timestamp,",
						"          DAY_US_MM_DD_YYYY as timestamp,",
						"          DAY_US_LONG as string,",
						"          DAY_US_M_D_YY as timestamp,",
						"          WEEK_SHORT as string,",
						"          WEEK_NUMBER as string,",
						"          WEEK_LONG as string,",
						"          MONTH_IN_QUARTER_NUMBER as string,",
						"          MONTH_IN_YEAR_SHORT as string,",
						"          MONTH_IN_YEAR_LONG as string,",
						"          WEEK_WK_QTR_YEAR as string,",
						"          WEEK_FROM_TO as string,",
						"          WEEK_STARTING as string,",
						"          WEEK_WK_YEAR_CONT as string,",
						"          WEEK_WK_YEAR as string,",
						"          WEEK_WK_QTR_YEAR_CONT as string,",
						"          DAY_IN_WEEK_SHORT as string,",
						"          DAY_IN_WEEK_NUMBER as string,",
						"          DAY_IN_WEEK_LONG as string,",
						"          MONTH_SHORT as string,",
						"          MONTH_NUMBER as string,",
						"          MONTH_LONG as string,",
						"          QUARTER_SHORT_US as string,",
						"          YEAR as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source11",
						"source11 derive(o_day_mm_dd_yyyy = toDate(fromUTC(DAY_YYYY_MM_DD, 'MM/dd/yyyy'))) ~> derivedColumn1",
						"source1, source2 join(source1@ORDER_ID == source2@ORDER_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1, source3 join(source2@CUSTOMER_ID == source3@CUSTOMER_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2, source4 join(source2@PAYMENT_ID == source4@Payment_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3, source5 join(DELIVERY_ID == Delivery_Type_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"join4, source6 join(source2@CHANNEL_ID == source6@Channel_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join5",
						"join5, source7 join(source1@PRODUCT_TOPPING_ID == source7@Product_Topping_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join6",
						"join6, source8 join(source2@STORE_LOCATION_ID == source8@Store_Location_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join7",
						"join7, source9 join(source1@PRODUCT_ID == source9@Product_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join8",
						"join8, source10 join(source1@PROMOTION_ID == source10@PROMOTION_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join9",
						"join9, derivedColumn1 join(ORDER_DATE == o_day_mm_dd_yyyy,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join10",
						"join10 select(mapColumn(",
						"          ORDER_LINE_ID,",
						"          ORDER_ID = source2@ORDER_ID,",
						"          CUSTOMER_DIM_KEY,",
						"          Payment_Ref_Key,",
						"          Channel_ref_key,",
						"          Delivery_Type_Ref_key,",
						"          Product_Topping_Dim_Key,",
						"          Loc_Dim_Key,",
						"          Surr_Product_kEY,",
						"          PROMOTION_DIM_KEY,",
						"          DATE_KEY,",
						"          ORDER_DATE,",
						"          ORDER_STATUS,",
						"          QUANTITY,",
						"          UNIT_PRICE,",
						"          Topping_Price,",
						"          PROMOTION_AMOUNT,",
						"          each(match(/* All input columns */true()),",
						"               /* Input name */$$ = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(o_create_Date = currentDate()) ~> derivedColumn2",
						"derivedColumn2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          order_line_id as integer,",
						"          order_id as integer,",
						"          customer_dim_key as long,",
						"          payment_ref_key as integer,",
						"          channel_ref_key as integer,",
						"          delivery_type_ref_key as integer,",
						"          product_topping_dim_key as integer,",
						"          loc_dim_key as integer,",
						"          Surr_Product_key as integer,",
						"          promotion_dim_key as integer,",
						"          date_key as string,",
						"          order_date as date,",
						"          order_status as string,",
						"          quantity as integer,",
						"          unit_price as decimal(10,2),",
						"          topping_price as decimal(5,2),",
						"          promotion_amount as decimal(10,2),",
						"          DM_create_date as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          order_line_id = ORDER_LINE_ID,",
						"          order_id = ORDER_ID,",
						"          customer_dim_key = CUSTOMER_DIM_KEY,",
						"          payment_ref_key = Payment_Ref_Key,",
						"          channel_ref_key = Channel_ref_key,",
						"          delivery_type_ref_key = Delivery_Type_Ref_key,",
						"          product_topping_dim_key = Product_Topping_Dim_Key,",
						"          loc_dim_key = Loc_Dim_Key,",
						"          Surr_Product_key = Surr_Product_kEY,",
						"          promotion_dim_key = PROMOTION_DIM_KEY,",
						"          date_key = DATE_KEY,",
						"          order_date = ORDER_DATE,",
						"          order_status = ORDER_STATUS,",
						"          quantity = QUANTITY,",
						"          unit_price = UNIT_PRICE,",
						"          topping_price = Topping_Price,",
						"          promotion_amount = PROMOTION_AMOUNT,",
						"          DM_create_date = o_create_Date",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableOrderLine')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableOrder')]",
				"[concat(variables('factoryId'), '/datasets/df_PizzaProject_Customer_DIM')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_payment_ref')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableDelivery_type')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableHrChannelRef')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_PRODUCT_TOPPINGS_dim')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableHRLOCATION_DIM1')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableSourceHrProductDim')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTablePromotion_dim')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableDate')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableSalesFact')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df__member_loyalty_1_to_member_loyalty')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "we are transfering the data type we don't need all as a varchar or string so we can change data type",
				"folder": {
					"name": "pizzaproject"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTablemember_loyalty",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableMemberLoyalty",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "cast1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          MEMBER_ID as string,",
						"          ORDER_DATE as string,",
						"          INITIAL_POINTS_RECEIVED_DATE as string,",
						"          INITIAL_REWARD_POINTS as string,",
						"          LAST_EARNED_POINTS as string,",
						"          TOTAL_POINTS_EARNED as string,",
						"          REMAINING_POINTS as string,",
						"          IS_ACTIVE as string,",
						"          STORE_LOCATION_ID as string,",
						"          ORDER_ID as string,",
						"          TOTAL_AMOUNT as string,",
						"          HUT_LOVER_ID as string,",
						"          CUSTOMER_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source1 cast(output(",
						"          MEMBER_ID as integer,",
						"          ORDER_DATE as date 'MM/dd/yyyy',",
						"          INITIAL_POINTS_RECEIVED_DATE as date 'MM/dd/yyyy',",
						"          INITIAL_REWARD_POINTS as integer,",
						"          LAST_EARNED_POINTS as integer,",
						"          TOTAL_POINTS_EARNED as integer,",
						"          REMAINING_POINTS as integer,",
						"          STORE_LOCATION_ID as integer,",
						"          ORDER_ID as integer,",
						"          TOTAL_AMOUNT as decimal(10,2),",
						"          HUT_LOVER_ID as integer,",
						"          CUSTOMER_ID as integer",
						"     ),",
						"     errors: true) ~> cast1",
						"cast1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTablemember_loyalty')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableMemberLoyalty')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_alter_row')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_data_Target_DataLoad_employee_csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as short,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as double,",
						"          COMMISSION_PCT as double,",
						"          MANAGER_ID as short,",
						"          DEPARTMENT_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> source1",
						"source1 alterRow(insertIf(1==1),",
						"     partitionBy('hash', 1)) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          EMPLOYEE_ID,",
						"          FIRST_NAME,",
						"          LAST_NAME,",
						"          EMAIL,",
						"          PHONE_NUMBER,",
						"          HIRE_DATE,",
						"          JOB_ID,",
						"          SALARY,",
						"          COMMISSION_PCT,",
						"          MANAGER_ID,",
						"          DEPARTMENT_ID",
						"     ),",
						"     partitionBy('hash', 1),",
						"     preCommands: [],",
						"     postCommands: []) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_data_Target_DataLoad_employee_csv')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_alter_row_join_table_dept')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_data_Target_DataLoad_employee_csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ds_dept_src",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as short,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as double,",
						"          COMMISSION_PCT as double,",
						"          MANAGER_ID as short,",
						"          DEPARTMENT_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> source1",
						"source(output(",
						"          DEPARTMENT_ID as short,",
						"          DEPARTMENT_NAME as string,",
						"          MANAGER_ID as short,",
						"          LOCATION_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"select1 alterRow(upsertIf(1==1),",
						"     partitionBy('hash', 1)) ~> alterRow1",
						"source1, source2 join(source1@DEPARTMENT_ID == source2@DEPARTMENT_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          EMPLOYEE_ID,",
						"          FIRST_NAME,",
						"          LAST_NAME,",
						"          EMAIL,",
						"          PHONE_NUMBER,",
						"          HIRE_DATE,",
						"          JOB_ID,",
						"          SALARY,",
						"          COMMISSION_PCT,",
						"          MANAGER_ID = source1@MANAGER_ID,",
						"          DEPARTMENT_ID = source1@DEPARTMENT_ID,",
						"          DEPARTMENT_ID = source2@DEPARTMENT_ID,",
						"          DEPARTMENT_NAME,",
						"          MANAGER_ID = source2@MANAGER_ID,",
						"          LOCATION_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['EMPLOYEE_ID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          EMPLOYEE_ID,",
						"          FIRST_NAME,",
						"          LAST_NAME,",
						"          EMAIL,",
						"          PHONE_NUMBER,",
						"          HIRE_DATE,",
						"          JOB_ID,",
						"          SALARY,",
						"          COMMISSION_PCT,",
						"          MANAGER_ID,",
						"          DEPARTMENT_ID,",
						"          DEPARTMENT_NAME",
						"     ),",
						"     partitionBy('hash', 1),",
						"     preCommands: [],",
						"     postCommands: []) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_data_Target_DataLoad_employee_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_dept_src')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_alter_row_join_table_dept_delete')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_data_Target_DataLoad_employee_csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as short,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as double,",
						"          COMMISSION_PCT as double,",
						"          MANAGER_ID as short,",
						"          DEPARTMENT_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> source1",
						"source(output(",
						"          EMPLOYEE_ID as short,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as double,",
						"          COMMISSION_PCT as double,",
						"          MANAGER_ID as short,",
						"          DEPARTMENT_ID as short,",
						"          DEPARTMENT_NAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source2",
						"join1 alterRow(deleteIf(isNull(source1@EMPLOYEE_ID)),",
						"     partitionBy('hash', 1)) ~> alterRow1",
						"source1, source2 join(source1@EMPLOYEE_ID == source2@EMPLOYEE_ID,",
						"     joinType:'right',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['EMPLOYEE_ID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          EMPLOYEE_ID = source2@EMPLOYEE_ID,",
						"          FIRST_NAME = source1@FIRST_NAME,",
						"          LAST_NAME = source1@LAST_NAME,",
						"          EMAIL = source1@EMAIL,",
						"          PHONE_NUMBER = source1@PHONE_NUMBER,",
						"          HIRE_DATE = source1@HIRE_DATE,",
						"          JOB_ID = source1@JOB_ID,",
						"          SALARY = source1@SALARY,",
						"          COMMISSION_PCT = source1@COMMISSION_PCT,",
						"          MANAGER_ID = source1@MANAGER_ID,",
						"          DEPARTMENT_ID = source1@DEPARTMENT_ID,",
						"          DEPARTMENT_NAME",
						"     ),",
						"     partitionBy('hash', 1),",
						"     preCommands: [],",
						"     postCommands: []) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_data_Target_DataLoad_employee_csv')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_channel_type')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "pizzaproject"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dt_channel_ref",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableHrChannelRef",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CHANNEL_ID as short,",
						"          CHANNEL_TYPE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(o_Date = currentDate()) ~> derivedColumn1",
						"derivedColumn1 alterRow(upsertIf(1==1)) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Channel_ref_key as integer,",
						"          Channel_ID as integer,",
						"          Channel_Type as string,",
						"          STG_CREATE_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['Channel_ID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Channel_ID = CHANNEL_ID,",
						"          Channel_Type = CHANNEL_TYPE,",
						"          STG_CREATE_DATE = o_Date",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dt_channel_ref')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableHrChannelRef')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_conditional_split')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_data_Target_DataLoad_employee_csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_aelisa_DepWiseSalary_csv",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "ds_aelisa_DepWiseSalary_csv",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "ds_aelisa_DepWiseSalary_csv",
								"type": "DatasetReference"
							},
							"name": "sink3"
						}
					],
					"transformations": [
						{
							"name": "cast1"
						},
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as short,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as double,",
						"          COMMISSION_PCT as double,",
						"          MANAGER_ID as short,",
						"          DEPARTMENT_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 cast(output(",
						"          EMPLOYEE_ID as integer,",
						"          SALARY as decimal(10,2),",
						"          COMMISSION_PCT as decimal(5,2),",
						"          DEPARTMENT_ID as integer",
						"     ),",
						"     errors: true) ~> cast1",
						"cast1 split(SALARY>10000,",
						"     SALARY>=5000 && SALARY<=10000,",
						"     disjoint: false) ~> split1@(salaryup10000, salarybet500010000, other)",
						"split1@salaryup10000 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['salary_over_10000.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"split1@salarybet500010000 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['salary_bet_5000_10000.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2",
						"split1@other sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['salary_under_5000.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink3"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_data_Target_DataLoad_employee_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_aelisa_DepWiseSalary_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_csv_to_stg_promotion')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_stg_PROMOTION",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_Hr_Stg_Promotion",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PROMOTION_ID as short,",
						"          PROMOTION_NAME as string,",
						"          PROMOTION_TYPE as string,",
						"          DISCOUNT_AMOUNT as string,",
						"          START_DATE as string,",
						"          END_DATE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(o_start_date = toDate(START_DATE,'MM/dd/yyyy'),",
						"          o_end_date = toDate(END_DATE,'MM/dd/yyyy'),",
						"          o_discount_price = toDecimal(replace(DISCOUNT_AMOUNT,'%',''), 5, 2)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Promotion_ID as integer,",
						"          Promotion_Name as string,",
						"          Promotion_Type as string,",
						"          Discount_amount as decimal(5,2),",
						"          START_DATE as date,",
						"          END_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Promotion_ID = PROMOTION_ID,",
						"          Promotion_Name = PROMOTION_NAME,",
						"          Promotion_Type = PROMOTION_TYPE,",
						"          Discount_amount = o_discount_price,",
						"          START_DATE = o_start_date,",
						"          END_DATE = o_end_date",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_stg_PROMOTION')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_Hr_Stg_Promotion')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_customer_review_FACT')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "pizzaproject"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableCustReviewStg",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTablecustomer_review_FACT",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          customer_dim_key as long,",
						"          loc_dim_key as integer,",
						"          date_key as string,",
						"          order_id as integer,",
						"          feedback as string,",
						"          feedback_date as date,",
						"          recomended as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT\\n    cust.customer_dim_key,\\n    loc.loc_dim_key,\\n    dt.date_key,\\n    csr.order_id,\\n    csr.feedback,\\n    csr.feedback_date,\\n    csr.recomended\\nFROM\\n         hr.stg_customer_review csr\\n    JOIN [hr].[Order]   ord ON csr.order_id = ord.order_id\\n    JOIN hr.CUSTOMER_DIM  cust ON csr.customer_id = cust.customer_id\\n    JOIN [hr].[LOCATION_DIM1] loc ON ord.store_location_id = loc.store_location_id\\n    JOIN hr.Date_data dt ON csr.feedback_date = dt.day_yyyy_mm_dd',",
						"     format: 'query') ~> source1",
						"source1 derive(o_Create_Date = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customer_dim_key as long,",
						"          loc_dim_key as integer,",
						"          date_key as string,",
						"          order_id as integer,",
						"          feedback as string,",
						"          feedback_date as date,",
						"          recomended as string,",
						"          DM_create_date as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          customer_dim_key,",
						"          loc_dim_key,",
						"          date_key,",
						"          order_id,",
						"          feedback,",
						"          feedback_date,",
						"          recomended,",
						"          DM_create_date = o_Create_Date",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableCustReviewStg')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTablecustomer_review_FACT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_customer_review_FACT_with_joinner')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "pizzaproject"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableCustReviewStg",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableOrder",
								"type": "DatasetReference"
							},
							"name": "source2"
						},
						{
							"dataset": {
								"referenceName": "df_PizzaProject_Customer_DIM",
								"type": "DatasetReference"
							},
							"name": "source3"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableHRLOCATION_DIM1",
								"type": "DatasetReference"
							},
							"name": "source4"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableDate",
								"type": "DatasetReference"
							},
							"name": "source5"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTablecustomer_review_FACT",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "join2"
						},
						{
							"name": "join3"
						},
						{
							"name": "join4"
						},
						{
							"name": "select2"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CUSTOMER_REVIEW_ID as integer,",
						"          RATING_SCALE as decimal(5,2),",
						"          FEEDBACK as string,",
						"          FEEDBACK_DATE as date,",
						"          RECOMENDED as string,",
						"          CUSTOMER_ID as integer,",
						"          ORDER_ID as integer,",
						"          STORE_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source(output(",
						"          ORDER_ID as integer,",
						"          ORDER_DATE as date,",
						"          ORDER_STATUS as string,",
						"          TOTAL_AMOUNT as decimal(10,2),",
						"          TOTAL_TAX as decimal(10,2),",
						"          TIPS as decimal(10,2),",
						"          TOTAL_QUANTITY as integer,",
						"          DELIVERY_ID as integer,",
						"          CHANNEL_ID as integer,",
						"          STORE_LOCATION_ID as integer,",
						"          CUSTOMER_ID as integer,",
						"          PAYMENT_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source2",
						"source(output(",
						"          CUSTOMER_DIM_KEY as long,",
						"          CUSTOMER_ID as short,",
						"          CUSTOMER_FIRST_NAME as string,",
						"          CUSTOMER_LAST_NAME as string,",
						"          IS_LOYAL as boolean,",
						"          CUSTOMER_EMAIL as string,",
						"          Secondary_Email as string,",
						"          CUSTOMER_PHONE_NUMBER as string,",
						"          SecondaryNo as string,",
						"          Office_ADDRESS_LANE1 as string,",
						"          Office_ADDRESS_LANE_2 as string,",
						"          Office_CITY_NAME as string,",
						"          Office_STATE_NAME as string,",
						"          Office_COUNTRY_NAME as string,",
						"          Office_ZIP_CODE as integer,",
						"          Office_GATE_CODE as short,",
						"          Residential_ADDRESS_LANE1 as string,",
						"          Residential_ADDRESS_LANE_2 as string,",
						"          Residential_CITY_NAME as string,",
						"          Residential_STATE_NAME as string,",
						"          Residential_COUNTRY_NAME as string,",
						"          Residential_ZIP_CODE as integer,",
						"          Residential_GATE_CODE as short,",
						"          JOINING_DATE as string,",
						"          USER_CREATE_DATE as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source3",
						"source(output(",
						"          Loc_Dim_Key as integer,",
						"          Store_Location_ID as integer,",
						"          Store_Name as string,",
						"          Store_Address as string,",
						"          Store_Open_Time as string,",
						"          Store_Close_Time as string,",
						"          State_Name as string,",
						"          FLAG as string,",
						"          DM_CREATE_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source4",
						"source(output(",
						"          DATE_KEY as string,",
						"          DAY_YYYY_MM_DD as timestamp,",
						"          DAY_US_MM_DD_YYYY as timestamp,",
						"          DAY_US_LONG as string,",
						"          DAY_US_M_D_YY as timestamp,",
						"          WEEK_SHORT as string,",
						"          WEEK_NUMBER as string,",
						"          WEEK_LONG as string,",
						"          MONTH_IN_QUARTER_NUMBER as string,",
						"          MONTH_IN_YEAR_SHORT as string,",
						"          MONTH_IN_YEAR_LONG as string,",
						"          WEEK_WK_QTR_YEAR as string,",
						"          WEEK_FROM_TO as string,",
						"          WEEK_STARTING as string,",
						"          WEEK_WK_YEAR_CONT as string,",
						"          WEEK_WK_YEAR as string,",
						"          WEEK_WK_QTR_YEAR_CONT as string,",
						"          DAY_IN_WEEK_SHORT as string,",
						"          DAY_IN_WEEK_NUMBER as string,",
						"          DAY_IN_WEEK_LONG as string,",
						"          MONTH_SHORT as string,",
						"          MONTH_NUMBER as string,",
						"          MONTH_LONG as string,",
						"          QUARTER_SHORT_US as string,",
						"          YEAR as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source5",
						"source1, source2 join(source1@ORDER_ID == source2@ORDER_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1, source3 join(source1@CUSTOMER_ID == source3@CUSTOMER_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2, source4 join(source2@STORE_LOCATION_ID == source4@Store_Location_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3, derivedColumn2 join(FEEDBACK_DATE == o_day_mm_dd_yyyy,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"join4 select(mapColumn(",
						"          CUSTOMER_DIM_KEY,",
						"          Loc_Dim_Key,",
						"          DATE_KEY,",
						"          ORDER_ID = source2@ORDER_ID,",
						"          FEEDBACK,",
						"          FEEDBACK_DATE,",
						"          RECOMENDED",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 derive(o_Create_Date = currentDate()) ~> derivedColumn1",
						"source5 derive(o_day_mm_dd_yyyy = toDate(fromUTC(DAY_YYYY_MM_DD, 'MM/dd/yyyy'))) ~> derivedColumn2",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          customer_dim_key as long,",
						"          loc_dim_key as integer,",
						"          date_key as string,",
						"          order_id as integer,",
						"          feedback as string,",
						"          feedback_date as date,",
						"          recomended as string,",
						"          DM_create_date as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          customer_dim_key = CUSTOMER_DIM_KEY,",
						"          loc_dim_key = Loc_Dim_Key,",
						"          date_key = DATE_KEY,",
						"          order_id = ORDER_ID,",
						"          feedback = FEEDBACK,",
						"          feedback_date = FEEDBACK_DATE,",
						"          recomended = RECOMENDED,",
						"          DM_create_date = o_Create_Date",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableCustReviewStg')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableOrder')]",
				"[concat(variables('factoryId'), '/datasets/df_PizzaProject_Customer_DIM')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableHRLOCATION_DIM1')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableDate')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTablecustomer_review_FACT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_delivery_type')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "pizzaproject"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dt_delivery_methods",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableDelivery_type",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          DELIVERY_ID as short,",
						"          DELIVERY_TYPE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(o_Date = currentDate()) ~> derivedColumn1",
						"derivedColumn1 alterRow(upsertIf(1==1)) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Delivery_Type_Ref_key as integer,",
						"          Delivery_Type_ID as integer,",
						"          Delivery_Type as string,",
						"          STG_CREATE_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['Delivery_Type_ID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Delivery_Type_ID = DELIVERY_ID,",
						"          Delivery_Type = DELIVERY_TYPE,",
						"          STG_CREATE_DATE = o_Date",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dt_delivery_methods')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableDelivery_type')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_dep_wish_salary')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_data_Target_DataLoad_employee_csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_aelisa_DepWiseSalary_csv",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "cast1"
						},
						{
							"name": "select1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "join1"
						},
						{
							"name": "select2"
						},
						{
							"name": "sort2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 cast(output(",
						"          EMPLOYEE_ID as integer,",
						"          SALARY as decimal(10,2),",
						"          DEPARTMENT_ID as integer",
						"     ),",
						"     errors: true) ~> cast1",
						"cast1 select(mapColumn(",
						"          DEPARTMENT_ID,",
						"          SALARY",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"sort1 aggregate(groupBy(DEPARTMENT_ID),",
						"     min_salary = min(SALARY),",
						"          max_salary = max(SALARY),",
						"          avg_salary = avg(SALARY),",
						"          sum_salary = sum(SALARY),",
						"          count_dept_id = count(DEPARTMENT_ID)) ~> aggregate1",
						"select1 sort(asc(DEPARTMENT_ID, true)) ~> sort1",
						"aggregate1, cast1 join(aggregate1@DEPARTMENT_ID == cast1@DEPARTMENT_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          FIRST_NAME,",
						"          DEPARTMENT_ID = aggregate1@DEPARTMENT_ID,",
						"          SALARY,",
						"          min_salary,",
						"          max_salary,",
						"          avg_salary,",
						"          sum_salary,",
						"          count_dept_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sort(asc(DEPARTMENT_ID, true)) ~> sort2",
						"sort2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['DepWiseSalary.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_data_Target_DataLoad_employee_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_aelisa_DepWiseSalary_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_lOCATION_DIM_QUERY_SCD2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "pizzaproject"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "df_pizzaproject_Location_DIM",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableHRLOCATION_DIM1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableHRLOCATION_DIM1",
								"type": "DatasetReference"
							},
							"name": "sinkinsert"
						}
					],
					"transformations": [
						{
							"name": "filterinsert"
						},
						{
							"name": "filterUPDATE"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          src_Store_Location_ID as short,",
						"          src_Store_Name as string,",
						"          src_Store_Address as string,",
						"          src_Store_Open_Time as string,",
						"          src_Store_Close_Time as string,",
						"          src_State_Name as string,",
						"          tgt_Store_Location_ID as integer,",
						"          tgt_Store_Name as string,",
						"          tgt_Store_Address as string,",
						"          tgt_Store_Open_Time as string,",
						"          tgt_Store_Close_Time as string,",
						"          tgt_State_Name as string,",
						"          tgt_FLAG as string,",
						"          Loc_Dim_Key as integer,",
						"          DM_CREATE_DATE as date,",
						"          src_md5 as binary,",
						"          tgt_md5 as binary,",
						"          flag_new as string,",
						"          flag_deactivate as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select \\r\\nsrc_Store_Location_ID\\r\\n,src_Store_Name\\r\\n,src_Store_Address\\r\\n,src_Store_Open_Time\\r\\n,src_Store_Close_Time\\r\\n,src_State_Name\\r\\n,tgt_Store_Location_ID\\r\\n,tgt_Store_Name\\r\\n,tgt_Store_Address\\r\\n,tgt_Store_Open_Time\\r\\n,tgt_Store_Close_Time\\r\\n,tgt_State_Name\\r\\n,tgt_FLAG\\r\\n,Loc_Dim_Key\\r\\n,DM_CREATE_DATE\\r\\n,src_md5\\r\\n,tgt_md5\\r\\n,case when tgt_Store_Location_ID is NULL or src_md5 <> tgt_md5 then \\'Y\\' end flag_new\\r\\n,case when tgt_Store_Location_ID is not NULL and src_md5 <> tgt_md5 then \\'N\\' end flag_deactivate\\r\\nfrom ( \\r\\nselect \\r\\nA.Store_Location_ID as src_Store_Location_ID,\\r\\nA.Store_Name as src_Store_Name,\\r\\nA.Store_Address as src_Store_Address,\\r\\nA.Store_Open_Time as src_Store_Open_Time,\\r\\nA.Store_Close_Time as src_Store_Close_Time,\\r\\nA.State_Name as src_State_Name,\\r\\nB.Store_Location_ID as tgt_Store_Location_ID,\\r\\nB.Store_Name as tgt_Store_Name,\\r\\nB.Store_Address as tgt_Store_Address,\\r\\nB.Store_Open_Time as tgt_Store_Open_Time,\\r\\nB.Store_Close_Time as tgt_Store_Close_Time,\\r\\nB.State_Name as tgt_State_Name,\\r\\nB.FLAG as tgt_FLAG,\\r\\nB.Loc_Dim_Key,\\r\\ncast(getdate() as date) as DM_CREATE_DATE,\\r\\nHashBytes(\\'MD5\\',concat(cast(A.Store_Name as varchar),cast(A.Store_Address as varchar),cast(A.Store_Open_Time as varchar),cast(A.Store_Close_Time as varchar),cast(A.State_Name as varchar))) as src_md5,\\r\\nHashBytes(\\'MD5\\',concat(cast(B.Store_Name as varchar),cast(B.Store_Address as varchar),cast(B.Store_Open_Time as varchar),cast(B.Store_Close_Time as varchar),cast(B.State_Name as varchar))) as tgt_md5\\r\\nfrom HR.location_dim A \\r\\nleft Join HR.location_dim1 B on \\r\\nA.Store_Location_ID = B.Store_Location_ID\\r\\nwhere B.FLAG = \\'Y\\'\\r\\n)a',",
						"     format: 'query') ~> source1",
						"source1 filter(isNull(tgt_Store_Location_ID) || src_md5 != tgt_md5) ~> filterinsert",
						"source1 filter(!isNull(tgt_Store_Location_ID) && src_md5 != tgt_md5) ~> filterUPDATE",
						"filterUPDATE alterRow(updateIf(1==1)) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Loc_Dim_Key as integer,",
						"          Store_Location_ID as integer,",
						"          Store_Name as string,",
						"          Store_Address as string,",
						"          Store_Open_Time as string,",
						"          Store_Close_Time as string,",
						"          State_Name as string,",
						"          FLAG as string,",
						"          DM_CREATE_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['Loc_Dim_Key'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Loc_Dim_Key,",
						"          FLAG = flag_deactivate",
						"     )) ~> sink1",
						"filterinsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Loc_Dim_Key as integer,",
						"          Store_Location_ID as integer,",
						"          Store_Name as string,",
						"          Store_Address as string,",
						"          Store_Open_Time as string,",
						"          Store_Close_Time as string,",
						"          State_Name as string,",
						"          FLAG as string,",
						"          DM_CREATE_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Store_Location_ID = src_Store_Location_ID,",
						"          Store_Name = src_Store_Name,",
						"          Store_Address = src_Store_Address,",
						"          Store_Open_Time = src_Store_Open_Time,",
						"          Store_Close_Time = src_Store_Close_Time,",
						"          State_Name = src_State_Name,",
						"          FLAG = flag_new,",
						"          DM_CREATE_DATE",
						"     )) ~> sinkinsert"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/df_pizzaproject_Location_DIM')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableHRLOCATION_DIM1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_lOCATION_DIM_SCD2_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "pizzaproject"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "df_pizzaproject_Location_DIM",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableHRLOCATION_DIM1",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableHRLOCATION_DIM1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableHRLOCATION_DIM1",
								"type": "DatasetReference"
							},
							"name": "sinkinsert"
						}
					],
					"transformations": [
						{
							"name": "filterinsert"
						},
						{
							"name": "filterUPDATE"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Location_Dim_Key } as long,",
						"          STORE_LOCATION_ID as short,",
						"          STORE_NAME as string,",
						"          STORE_ADDRESS as string,",
						"          STORE_PHONE_NUMBER as string,",
						"          STORE_OPEN_TIME as string,",
						"          STORE_CLOSE_TIME as string,",
						"          STATE_NAME as string,",
						"          STATE_COUNTRY as string,",
						"          CREATE_USER_DATE as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source(output(",
						"          Loc_Dim_Key as integer,",
						"          Store_Location_ID as integer,",
						"          Store_Name as string,",
						"          Store_Address as string,",
						"          Store_Open_Time as string,",
						"          Store_Close_Time as string,",
						"          State_Name as string,",
						"          FLAG as string,",
						"          DM_CREATE_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select * from  HR.LOCATION_DIM1 where Flag = \\'Active\\'',",
						"     format: 'query') ~> source2",
						"derivedColumn1 filter(isNull(source2@Store_Location_ID) || src_md5 != tgt_md5) ~> filterinsert",
						"derivedColumn1 filter(!isNull(source2@Store_Location_ID) && src_md5 != tgt_md5) ~> filterUPDATE",
						"filterUPDATE alterRow(updateIf(1==1)) ~> alterRow1",
						"source1, source2 lookup(source1@STORE_LOCATION_ID == source2@Store_Location_ID,",
						"     multiple: true,",
						"     broadcast: 'auto',",
						"     pickup: 'any')~> lookup1",
						"lookup1 derive(o_create_date = currentDate(),",
						"          Flag_Active = 'Active',",
						"          Flag_Inactive = 'InActive',",
						"          src_md5 = md5(concat(source1@STORE_NAME,source1@STORE_ADDRESS,source1@STORE_OPEN_TIME,source1@STORE_CLOSE_TIME,source1@STATE_NAME)),",
						"          tgt_md5 = md5(concat(source2@Store_Name, source2@Store_Address,source2@Store_Open_Time,source2@Store_Close_Time,source2@State_Name))) ~> derivedColumn1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Loc_Dim_Key as integer,",
						"          Store_Location_ID as integer,",
						"          Store_Name as string,",
						"          Store_Address as string,",
						"          Store_Open_Time as string,",
						"          Store_Close_Time as string,",
						"          State_Name as string,",
						"          FLAG as string,",
						"          DM_CREATE_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['Loc_Dim_Key'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Loc_Dim_Key,",
						"          FLAG = Flag_Inactive,",
						"          DM_CREATE_DATE = CREATE_USER_DATE",
						"     )) ~> sink1",
						"filterinsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Loc_Dim_Key as integer,",
						"          Store_Location_ID as integer,",
						"          Store_Name as string,",
						"          Store_Address as string,",
						"          Store_Open_Time as string,",
						"          Store_Close_Time as string,",
						"          State_Name as string,",
						"          FLAG as string,",
						"          DM_CREATE_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Store_Location_ID = source1@STORE_LOCATION_ID,",
						"          Store_Name = source1@STORE_NAME,",
						"          Store_Address = source1@STORE_ADDRESS,",
						"          Store_Open_Time = source1@STORE_OPEN_TIME,",
						"          Store_Close_Time = source1@STORE_CLOSE_TIME,",
						"          State_Name = source1@STATE_NAME,",
						"          FLAG = Flag_Active,",
						"          DM_CREATE_DATE = o_create_date",
						"     )) ~> sinkinsert"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/df_pizzaproject_Location_DIM')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableHRLOCATION_DIM1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_lead_lag_salary')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_data_Target_DataLoad_employee_csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_aelisa_DepWiseSalary_csv",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "cast1"
						},
						{
							"name": "window1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as short,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as double,",
						"          COMMISSION_PCT as double,",
						"          MANAGER_ID as short,",
						"          DEPARTMENT_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 cast(output(",
						"          EMPLOYEE_ID as integer,",
						"          SALARY as decimal(10,2),",
						"          COMMISSION_PCT as decimal(5,2),",
						"          DEPARTMENT_ID as integer",
						"     ),",
						"     errors: true) ~> cast1",
						"cast1 window(asc(SALARY, true),",
						"     LEAD_Salary = lead(SALARY),",
						"          LAG_Salary = lag(SALARY)) ~> window1",
						"window1 select(mapColumn(",
						"          EMPLOYEE_ID,",
						"          FIRST_NAME,",
						"          DEPARTMENT_ID,",
						"          SALARY,",
						"          LEAD_Salary,",
						"          LAG_Salary",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['lead_lag_salary.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_data_Target_DataLoad_employee_csv')]",
				"[concat(variables('factoryId'), '/datasets/ds_aelisa_DepWiseSalary_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_merge_file_department_name')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_src_tgt_dep_name",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "cast1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as short,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as double,",
						"          COMMISSION_PCT as double,",
						"          MANAGER_ID as short,",
						"          DEPARTMENT_ID as short,",
						"          DEPARTMENT_NAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     rowUrlColumn: 'FileName',",
						"     wildcardPaths:['Department_Name/*.csv'],",
						"     partitionBy('hash', 1)) ~> source1",
						"source1 cast(output(",
						"          EMPLOYEE_ID as integer,",
						"          HIRE_DATE as date 'MM-dd-yyyy',",
						"          SALARY as decimal(10,2),",
						"          COMMISSION_PCT as decimal(5,2),",
						"          DEPARTMENT_ID as integer",
						"     ),",
						"     errors: true) ~> cast1",
						"cast1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          EMPLOYEE_ID,",
						"          FIRST_NAME,",
						"          LAST_NAME,",
						"          EMAIL,",
						"          PHONE_NUMBER,",
						"          HIRE_DATE,",
						"          JOB_ID,",
						"          SALARY,",
						"          COMMISSION_PCT,",
						"          MANAGER_ID,",
						"          DEPARTMENT_ID,",
						"          DEPARTMENT_NAME,",
						"          FileName",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_src_tgt_dep_name')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_paymeent_ref')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "pizzaproject"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dt_payment_method",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_payment_ref",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PAYMENT_ID as short,",
						"          PAYMENT_TYPE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(o_Currect_Date = currentDate()) ~> derivedColumn1",
						"derivedColumn1 alterRow(upsertIf(1==1)) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Payment_Ref_Key as integer,",
						"          Payment_ID as integer,",
						"          Payment_Type as string,",
						"          STG_CREATE_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['Payment_ID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Payment_ID = PAYMENT_ID,",
						"          Payment_Type = PAYMENT_TYPE,",
						"          STG_CREATE_DATE = o_Currect_Date",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dt_payment_method')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_payment_ref')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_pivot_emp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_data_Target_DataLoad_employee_csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "pivot_emp",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "pivot1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 pivot(groupBy(DEPARTMENT_ID),",
						"     pivotBy(JOB_ID),",
						"     {} = count(JOB_ID),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> pivot1",
						"pivot1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['tgt_pivot_emp.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_data_Target_DataLoad_employee_csv')]",
				"[concat(variables('factoryId'), '/datasets/pivot_emp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_src_tgt')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "we transfer the department data source to target ",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DataFlowSource",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_dept_src_tgt",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          DEPARTMENT_ID as short,",
						"          DEPARTMENT_NAME as string,",
						"          MANAGER_ID as short,",
						"          LOCATION_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FIRST_NAME as string,",
						"          DEPARTMENT_ID as string,",
						"          SALARY as string,",
						"          min_salary as string,",
						"          max_salary as string,",
						"          avg_salary as string,",
						"          sum_salary as string,",
						"          count_dept_id as string",
						"     ),",
						"     partitionFileNames:['tgt_simple_df'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DataFlowSource')]",
				"[concat(variables('factoryId'), '/datasets/ds_dept_src_tgt')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_stg_customer_review')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "pizzaproject"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedTextCust_review_stg",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableCustReviewStg",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "cast1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CUSTOMER_REVIEW_ID as string,",
						"          RATING_SCALE as string,",
						"          FEEDBACK as string,",
						"          FEEDBACK_DATE as string,",
						"          RECOMENDED as string,",
						"          CUSTOMER_ID as string,",
						"          ORDER_ID as string,",
						"          STORE_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 cast(output(",
						"          CUSTOMER_REVIEW_ID as integer,",
						"          RATING_SCALE as decimal(5,2),",
						"          FEEDBACK_DATE as date 'MM/dd/yyyy',",
						"          CUSTOMER_ID as integer,",
						"          ORDER_ID as integer,",
						"          STORE_ID as integer",
						"     ),",
						"     errors: true) ~> cast1",
						"cast1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedTextCust_review_stg')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableCustReviewStg')]"
			]
		}
	]
}